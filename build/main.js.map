{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\r\n * Created with @iobroker/create-adapter v2.6.5\r\n */\r\n\r\n// The adapter-core module gives you access to the core ioBroker functions\r\n// you need to create an adapter\r\nimport * as utils from '@iobroker/adapter-core';\r\nimport _ from 'lodash';\r\n\r\n// Load your modules here, e.g.:\r\nimport { ApiEndpoints, OmvApi } from './lib/omv-rpc.js';\r\nimport * as tree from './lib/tree/index.js'\r\nimport * as myHelper from './lib/helper.js';\r\nimport * as myI18n from './lib/i18n.js';\r\nimport { IoBrokerObjectDefinitions, myCommonState } from './lib/myTypes.js';\r\n\r\nclass Openmediavault extends utils.Adapter {\r\n\tomvApi: OmvApi | undefined = undefined;\r\n\r\n\tsubscribedList: string[] = [];\r\n\r\n\tupdateTimeout: ioBroker.Timeout | undefined = undefined;\r\n\r\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n\t\tsuper({\r\n\t\t\t...options,\r\n\t\t\tname: 'openmediavault',\r\n\t\t\tuseFormatDate: true\r\n\t\t});\r\n\t\tthis.on('ready', this.onReady.bind(this));\r\n\t\tthis.on('stateChange', this.onStateChange.bind(this));\r\n\t\t// this.on('objectChange', this.onObjectChange.bind(this));\r\n\t\tthis.on('message', this.onMessage.bind(this));\r\n\t\tthis.on('unload', this.onUnload.bind(this));\r\n\t}\r\n\r\n\t//#region adapter methods\r\n\r\n\t/**\r\n\t * Is called when databases are connected and adapter received configuration.\r\n\t */\r\n\tprivate async onReady(): Promise<void> {\r\n\r\n\t\t// ohne worte....\r\n\t\tawait myI18n.init(`${utils.getAbsoluteDefaultDataDir().replace('iobroker-data/', '')}node_modules/iobroker.${this.name}/admin`, this);\r\n\r\n\t\tthis.omvApi = new OmvApi(this);\r\n\r\n\t\tawait this.updateData(true);\r\n\r\n\t\t// const tmp = tree.fileSystem.getStateIDs();\r\n\t\t// let list = []\r\n\r\n\t\t// for (let id of tmp) {\r\n\t\t// \tlist.push({ id: id });\r\n\t\t// }\r\n\r\n\t\t// this.log.warn(JSON.stringify(list));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n\t */\r\n\tprivate async onUnload(callback: () => void): Promise<void> {\r\n\t\ttry {\r\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\r\n\t\t\tif (this.updateTimeout) clearTimeout(this.updateTimeout);\r\n\t\t\t// clearTimeout(timeout2);\r\n\t\t\t// ...\r\n\t\t\t// clearInterval(interval1);\r\n\r\n\t\t\tawait this.omvApi?.logout();\r\n\r\n\t\t\tcallback();\r\n\t\t} catch (e) {\r\n\t\t\tcallback();\r\n\t\t}\r\n\t}\r\n\r\n\t// If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\r\n\t// You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\r\n\t// /**\r\n\t//  * Is called if a subscribed object changes\r\n\t//  */\r\n\t// private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\r\n\t// \tif (obj) {\r\n\t// \t\t// The object was changed\r\n\t// \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\r\n\t// \t} else {\r\n\t// \t\t// The object was deleted\r\n\t// \t\tthis.log.info(`object ${id} deleted`);\r\n\t// \t}\r\n\t// }\r\n\r\n\t/**\r\n\t * Is called if a subscribed state changes\r\n\t */\r\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\r\n\t\tif (state) {\r\n\t\t\t// The state was changed\r\n\t\t\tthis.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\r\n\t\t} else {\r\n\t\t\t// The state was deleted\r\n\t\t\tthis.log.info(`state ${id} deleted`);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\r\n\t * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\r\n\t */\r\n\tprivate async onMessage(obj: ioBroker.Message): Promise<void> {\r\n\t\tconst logPrefix = '[onMessage]:';\r\n\r\n\t\ttry {\r\n\t\t\tif (typeof obj === 'object') {\r\n\t\t\t\tif (obj.command.endsWith('StateList')) {\r\n\t\t\t\t\t//@ts-ignore\r\n\t\t\t\t\tconst states = tree[obj.command.replace('StateList', '')].getStateIDs();\r\n\t\t\t\t\tlet list = [];\r\n\r\n\t\t\t\t\tif (states) {\r\n\t\t\t\t\t\tfor (let i = 0; i <= states.length - 1; i++) {\r\n\r\n\t\t\t\t\t\t\tif (states[i + 1] && states[i] === myHelper.getIdWithoutLastPart(states[i + 1])) {\r\n\t\t\t\t\t\t\t\tlist.push({\r\n\t\t\t\t\t\t\t\t\tlabel: `[Channel]\\t ${states[i]}`,\r\n\t\t\t\t\t\t\t\t\tvalue: states[i],\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tlist.push({\r\n\t\t\t\t\t\t\t\t\tlabel: `[State]\\t\\t ${states[i]}`,\r\n\t\t\t\t\t\t\t\t\tvalue: states[i],\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlist = _.orderBy(list, ['value'], ['asc']);\r\n\r\n\t\t\t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, list, obj.callback);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t} catch (error: any) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\t//#endregion\r\n\r\n\t//#region updateData\r\n\r\n\tprivate async updateData(isAdapterStart: boolean = false) {\r\n\t\tconst logPrefix = '[updateData]:';\r\n\r\n\t\ttry {\r\n\t\t\tif (this.updateTimeout) {\r\n\t\t\t\tthis.clearTimeout(this.updateTimeout);\r\n\t\t\t\tthis.updateTimeout = undefined;\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateTimeout = this.setTimeout(() => {\r\n\t\t\t\tthis.updateData()\r\n\t\t\t}, this.config.updateInterval * 1000);\r\n\r\n\t\t\tif (this.omvApi) {\r\n\t\t\t\tif (!this.omvApi.isConnected) {\r\n\t\t\t\t\tawait this.omvApi.login();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.connected && this.omvApi?.isConnected) {\r\n\t\t\t\t\tthis.log.debug(`${logPrefix} start updating data...`);\r\n\r\n\t\t\t\t\tfor (const endpoint in ApiEndpoints) {\r\n\t\t\t\t\t\t//@ts-ignore\r\n\t\t\t\t\t\tif (tree[endpoint]) {\r\n\t\t\t\t\t\t\t//@ts-ignore\r\n\t\t\t\t\t\t\tif (Object.hasOwn(tree[endpoint], \"iobObjectDefintions\")) {\r\n\r\n\t\t\t\t\t\t\t\t//@ts-ignore\r\n\t\t\t\t\t\t\t\tawait this.updateDataGeneric(endpoint, tree[endpoint], tree[endpoint].iobObjectDefintions, isAdapterStart);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tif (this.log.level === 'debug') {\r\n\t\t\t\t\t\t\t\t\tthis.log.warn(`${logPrefix} no iob definitions for endpoint ${endpoint} exists!`);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error: any) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * update data gerneric\r\n\t * @param endpoint \r\n\t * @param treeType \r\n\t * @param iobObjectDefintions \r\n\t * @param isAdapterStart \r\n\t */\r\n\tprivate async updateDataGeneric(endpoint: ApiEndpoints, treeType: any, iobObjectDefintions: IoBrokerObjectDefinitions, isAdapterStart: boolean = false) {\r\n\t\tconst logPrefix = `[updateDataGeneric]: [${endpoint}]: `;\r\n\r\n\t\ttry {\r\n\t\t\tif (this.connected && this.omvApi?.isConnected) {\r\n\t\t\t\t//@ts-ignore\r\n\t\t\t\tif (this.config[`${endpoint}Enabled`]) {\r\n\t\t\t\t\tif (isAdapterStart) {\r\n\t\t\t\t\t\tawait this.createOrUpdateChannel(treeType.idChannel, iobObjectDefintions.channelName, undefined, true);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst data: any = await this.omvApi?.retrievData(endpoint);\r\n\r\n\t\t\t\t\tif (data) {\r\n\t\t\t\t\t\tif (Array.isArray(data)) {\r\n\t\t\t\t\t\t\tfor (let device of data) {\r\n\t\t\t\t\t\t\t\tif (iobObjectDefintions.deviceIdProperty && device[iobObjectDefintions.deviceIdProperty]) {\r\n\t\t\t\t\t\t\t\t\tconst idDevice = `${treeType.idChannel}.${device[iobObjectDefintions.deviceIdProperty]}`;\r\n\r\n\t\t\t\t\t\t\t\t\tawait this.createOrUpdateDevice(idDevice, iobObjectDefintions.deviceNameProperty && device[iobObjectDefintions.deviceNameProperty] ? device[iobObjectDefintions.deviceNameProperty] : 'unknown', undefined, undefined, undefined, isAdapterStart, true);\r\n\t\t\t\t\t\t\t\t\t//@ts-ignore\r\n\t\t\t\t\t\t\t\t\tawait this.createOrUpdateGenericState(idDevice, treeType.get(), device, this.config[`${endpoint}StatesBlackList`], this.config[`${endpoint}StatesIsWhiteList`], device, device, isAdapterStart);\r\n\r\n\t\t\t\t\t\t\t\t\tthis.log.debug(`${logPrefix} device '${device[iobObjectDefintions.deviceIdProperty]}' data successfully updated`);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tthis.log.error(`${logPrefix} deviceName property '${iobObjectDefintions.deviceIdProperty}' not exists in device`);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t//@ts-ignore\r\n\t\t\t\t\t\t\tawait this.createOrUpdateGenericState(treeType.idChannel, treeType.get(), data, this.config[`${endpoint}StatesBlackList`], this.config[`${endpoint}StatesIsWhiteList`], data, data, isAdapterStart);\r\n\r\n\t\t\t\t\t\t\tthis.log.debug(`${logPrefix} channel '${iobObjectDefintions.channelName}' data successfully updated`);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (isAdapterStart) {\r\n\t\t\t\t\t\t\tthis.log.info(`${logPrefix} data successfully updated`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (await this.objectExists(treeType.idChannel)) {\r\n\t\t\t\t\t\tawait this.delObjectAsync(treeType.idChannel, { recursive: true });\r\n\t\t\t\t\t\tthis.log.debug(`${logPrefix} '${treeType.idChannel}' deleted`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error: any) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * create or update a channel object, update will only be done on adapter start\r\n\t * @param id \r\n\t * @param name \r\n\t * @param onlineId \r\n\t * @param icon \r\n\t * @param isAdapterStart\r\n\t */\r\n\tprivate async createOrUpdateChannel(id: string, name: string, icon: string | undefined = undefined, isAdapterStart: boolean = false): Promise<void> {\r\n\t\tconst logPrefix = '[createOrUpdateChannel]:';\r\n\r\n\t\ttry {\r\n\t\t\tconst i18n = name ? myI18n.getTranslatedObject(name) : name;\r\n\r\n\t\t\tlet common = {\r\n\t\t\t\tname: name && Object.keys(i18n).length > 1 ? i18n : name,\r\n\t\t\t\ticon: icon\r\n\t\t\t};\r\n\r\n\t\t\tif (!await this.objectExists(id)) {\r\n\t\t\t\tthis.log.debug(`${logPrefix} creating channel '${id}'`);\r\n\t\t\t\tawait this.setObjectAsync(id, {\r\n\t\t\t\t\ttype: 'channel',\r\n\t\t\t\t\tcommon: common,\r\n\t\t\t\t\tnative: {}\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tif (isAdapterStart) {\r\n\t\t\t\t\tconst obj = await this.getObjectAsync(id);\r\n\r\n\t\t\t\t\tif (obj && obj.common) {\r\n\t\t\t\t\t\tif (!myHelper.isChannelCommonEqual(obj.common as ioBroker.ChannelCommon, common)) {\r\n\t\t\t\t\t\t\tawait this.extendObject(id, { common: common });\r\n\r\n\t\t\t\t\t\t\tlet diff = myHelper.deepDiffBetweenObjects(common, obj.common, this);\r\n\t\t\t\t\t\t\tif (diff && diff.icon) diff.icon = _.truncate(diff.icon);\t// reduce base64 image string for logging\r\n\r\n\t\t\t\t\t\t\tthis.log.debug(`${logPrefix} channel updated '${id}' (updated properties: ${JSON.stringify(diff)})`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error: any) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* create or update a device object, update will only be done on adapter start\r\n\t* @param id \r\n\t* @param name \r\n\t* @param onlineId \r\n\t* @param icon \r\n\t* @param isAdapterStart\r\n\t*/\r\n\tprivate async createOrUpdateDevice(id: string, name: string | undefined, onlineId: string | undefined, errorId: string | undefined = undefined, icon: string | undefined = undefined, isAdapterStart: boolean = false, logChanges: boolean = true): Promise<void> {\r\n\t\tconst logPrefix = '[createOrUpdateDevice]:';\r\n\r\n\t\ttry {\r\n\t\t\tconst i18n: any = name ? myI18n.getTranslatedObject(name) : name;\r\n\r\n\t\t\tlet common: any = {\r\n\t\t\t\tname: name && Object.keys(i18n).length > 1 ? i18n : name,\r\n\t\t\t\ticon: icon\r\n\t\t\t};\r\n\r\n\t\t\tif (onlineId) {\r\n\t\t\t\tcommon['statusStates'] = {\r\n\t\t\t\t\tonlineId: onlineId\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (errorId) {\r\n\t\t\t\tcommon['statusStates']['errorId'] = errorId;\r\n\t\t\t}\r\n\r\n\t\t\tif (!await this.objectExists(id)) {\r\n\t\t\t\tthis.log.debug(`${logPrefix} creating device '${id}'`);\r\n\t\t\t\tawait this.setObject(id, {\r\n\t\t\t\t\ttype: 'device',\r\n\t\t\t\t\tcommon: common,\r\n\t\t\t\t\tnative: {}\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tif (isAdapterStart) {\r\n\t\t\t\t\tconst obj = await this.getObjectAsync(id);\r\n\r\n\t\t\t\t\tif (obj && obj.common) {\r\n\t\t\t\t\t\tif (!myHelper.isDeviceCommonEqual(obj.common as ioBroker.ChannelCommon, common)) {\r\n\t\t\t\t\t\t\tawait this.extendObject(id, { common: common });\r\n\r\n\t\t\t\t\t\t\tlet diff = myHelper.deepDiffBetweenObjects(common, obj.common, this);\r\n\t\t\t\t\t\t\tif (diff && diff.icon) diff.icon = _.truncate(diff.icon);\t// reduce base64 image string for logging\r\n\r\n\t\t\t\t\t\t\tthis.log.debug(`${logPrefix} device updated '${id}' ${logChanges ? `(updated properties: ${JSON.stringify(diff)})` : ''}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error: any) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tasync createOrUpdateGenericState(channel: string, treeDefinition: any, objValues: any, blacklistFilter: { id: string }[], isWhiteList: boolean, objDevices: any, objChannel: any, isAdapterStart: boolean = false, filterId = '', isChannelOnWhitelist: boolean = false) {\r\n\t\tconst logPrefix = '[createOrUpdateGenericState]:';\r\n\r\n\t\ttry {\r\n\t\t\tif (this.connected && this.omvApi?.isConnected) {\r\n\t\t\t\tfor (const key in treeDefinition) {\r\n\t\t\t\t\tlet logMsgState = `${channel}.${key}`.split('.')?.slice(1)?.join('.');\r\n\r\n\t\t\t\t\tlet logDetails = `${(objDevices as any)?.mac ? `mac: ${(objDevices as any)?.mac}` : (objDevices as any)?.ip ? `ip: ${(objDevices as any)?.ip}` : (objDevices as any)?._id ? `id: ${(objDevices as any)?._id}` : ''}`\r\n\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\t// if we have an own defined state which takes val from other property\r\n\t\t\t\t\t\tconst valKey = Object.hasOwn(objValues, treeDefinition[key].valFromProperty) && treeDefinition[key].valFromProperty ? treeDefinition[key].valFromProperty : key\r\n\r\n\t\t\t\t\t\tconst cond1 = (Object.hasOwn(objValues, valKey) && objValues[valKey] !== undefined) || (Object.hasOwn(treeDefinition[key], 'id') && !Object.hasOwn(treeDefinition[key], 'valFromProperty'));\r\n\t\t\t\t\t\tconst cond2 = Object.hasOwn(treeDefinition[key], 'iobType') && !Object.hasOwn(treeDefinition[key], 'object') && !Object.hasOwn(treeDefinition[key], 'array');\r\n\t\t\t\t\t\tconst cond3 = (Object.hasOwn(treeDefinition[key], 'conditionToCreateState') && treeDefinition[key].conditionToCreateState(objChannel, this) === true) || !Object.hasOwn(treeDefinition[key], 'conditionToCreateState');\r\n\r\n\t\t\t\t\t\t// if (channel === 'devices.f4:e2:c6:55:55:e2' && (key === 'satisfaction' || valKey === 'satisfaction')) {\r\n\t\t\t\t\t\t// \tthis.log.warn(`cond 1: ${cond1}`);\r\n\t\t\t\t\t\t// \tthis.log.warn(`cond 2: ${cond2}`);\r\n\t\t\t\t\t\t// \tthis.log.warn(`cond 3: ${cond3}`)\r\n\t\t\t\t\t\t// \tthis.log.warn(`val: ${objValues[valKey]}`);\r\n\t\t\t\t\t\t// }\r\n\r\n\t\t\t\t\t\tif (key && cond1 && cond2 && cond3) {\r\n\t\t\t\t\t\t\t// if we have a 'iobType' property, then it's a state\r\n\t\t\t\t\t\t\tlet stateId = key;\r\n\r\n\t\t\t\t\t\t\tif (Object.hasOwn(treeDefinition[key], 'id')) {\r\n\t\t\t\t\t\t\t\t// if we have a custom state, use defined id\r\n\t\t\t\t\t\t\t\tstateId = treeDefinition[key].id;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tlogMsgState = `${channel}.${stateId}`.split('.')?.slice(1)?.join('.');\r\n\r\n\t\t\t\t\t\t\tif ((!isWhiteList && !_.some(blacklistFilter, { id: `${filterId}${stateId}` })) || (isWhiteList && _.some(blacklistFilter, { id: `${filterId}${stateId}` })) || isChannelOnWhitelist || Object.hasOwn(treeDefinition[key], 'required')) {\r\n\t\t\t\t\t\t\t\tif (!await this.objectExists(`${channel}.${stateId}`)) {\r\n\t\t\t\t\t\t\t\t\t// create State\r\n\t\t\t\t\t\t\t\t\tthis.log.silly(`${logPrefix} ${objDevices?.name} - creating state '${logMsgState}'`);\r\n\t\t\t\t\t\t\t\t\tconst obj = {\r\n\t\t\t\t\t\t\t\t\t\ttype: 'state',\r\n\t\t\t\t\t\t\t\t\t\tcommon: await this.getCommonGenericState(key, (treeDefinition as { [key: string]: myCommonState }), objDevices, logMsgState),\r\n\t\t\t\t\t\t\t\t\t\tnative: {}\r\n\t\t\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\t\t\t\tawait this.setObjectAsync(`${channel}.${stateId}`, obj);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t// update State if needed (only on adapter start)\r\n\t\t\t\t\t\t\t\t\tif (isAdapterStart) {\r\n\t\t\t\t\t\t\t\t\t\tconst obj = await this.getObjectAsync(`${channel}.${stateId}`);\r\n\r\n\t\t\t\t\t\t\t\t\t\tconst commonUpdated = await this.getCommonGenericState(key, (treeDefinition as { [key: string]: myCommonState }), objDevices, logMsgState);\r\n\r\n\t\t\t\t\t\t\t\t\t\tif (obj && obj.common) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (!myHelper.isStateCommonEqual(obj.common as ioBroker.StateCommon, commonUpdated)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tawait this.extendObject(`${channel}.${stateId}`, { common: commonUpdated });\r\n\t\t\t\t\t\t\t\t\t\t\t\tthis.log.debug(`${logPrefix} ${objDevices?.name} - updated common properties of state '${logMsgState}' (updated properties: ${JSON.stringify(myHelper.deepDiffBetweenObjects(commonUpdated, obj.common, this))})`);\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif (!this.subscribedList.includes(`${channel}.${stateId}`) && ((treeDefinition[key].write && treeDefinition[key].write === true) || Object.hasOwn(treeDefinition[key], 'subscribeMe'))) {\r\n\t\t\t\t\t\t\t\t\t// state is writeable or has subscribeMe Property -> subscribe it\r\n\t\t\t\t\t\t\t\t\tthis.log.silly(`${logPrefix} ${objDevices?.name} - subscribing state '${logMsgState}'`);\r\n\t\t\t\t\t\t\t\t\tawait this.subscribeStatesAsync(`${channel}.${stateId}`);\r\n\r\n\t\t\t\t\t\t\t\t\tthis.subscribedList.push(`${channel}.${stateId}`);\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif (objValues && (Object.hasOwn(objValues, key) || (Object.hasOwn(objValues, treeDefinition[key].valFromProperty)))) {\r\n\t\t\t\t\t\t\t\t\tconst val = treeDefinition[key].readVal ? await treeDefinition[key].readVal(objValues[valKey], this, objDevices, `${channel}.${stateId}`) : objValues[valKey];\r\n\r\n\t\t\t\t\t\t\t\t\tlet changedObj: any = undefined\r\n\r\n\t\t\t\t\t\t\t\t\tif (key === 'last_seen' || key === 'first_seen' || key === 'rundate') {\r\n\t\t\t\t\t\t\t\t\t\t// set lc to last_seen value\r\n\t\t\t\t\t\t\t\t\t\tchangedObj = await this.setStateChangedAsync(`${channel}.${stateId}`, { val: val, lc: val * 1000 }, true);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tchangedObj = await this.setStateChangedAsync(`${channel}.${stateId}`, val, true);\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tif (!isAdapterStart && changedObj && Object.hasOwn(changedObj, 'notChanged') && !changedObj.notChanged) {\r\n\t\t\t\t\t\t\t\t\t\tthis.log.silly(`${logPrefix} value of state '${logMsgState}' changed to ${val}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tif (!Object.hasOwn(treeDefinition[key], 'id')) {\r\n\t\t\t\t\t\t\t\t\t\t// only report it if it's not a custom defined state\r\n\t\t\t\t\t\t\t\t\t\tthis.log.debug(`${logPrefix} ${objDevices?.name} - property '${logMsgState}' not exists in bootstrap values (sometimes this option may first need to be activated / used in the Unifi Network application or will update by an event)`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t// channel is on blacklist\r\n\t\t\t\t\t\t\t\t// delete also at runtime, because some properties are only available on websocket data\r\n\t\t\t\t\t\t\t\tif (await this.objectExists(`${channel}.${stateId}`)) {\r\n\t\t\t\t\t\t\t\t\tawait this.delObjectAsync(`${channel}.${stateId}`);\r\n\r\n\t\t\t\t\t\t\t\t\tthis.log.info(`${logPrefix} ${logDetails ? `(${logDetails}) ` : ''}state '${channel}.${stateId}' delete, ${isWhiteList ? 'it\\'s not on the whitelist' : 'it\\'s on the blacklist'}`);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// it's a channel from type object\r\n\t\t\t\t\t\t\tif (Object.hasOwn(treeDefinition[key], 'object') && Object.hasOwn(objValues, key)) {\r\n\t\t\t\t\t\t\t\tconst idChannelAppendix = Object.hasOwn(treeDefinition[key], 'idChannel') ? treeDefinition[key].idChannel : key\r\n\t\t\t\t\t\t\t\tconst idChannel = `${channel}.${idChannelAppendix}`;\r\n\r\n\t\t\t\t\t\t\t\tif ((!isWhiteList && !_.some(blacklistFilter, { id: `${filterId}${idChannelAppendix}` })) || (isWhiteList && _.some(blacklistFilter, (x) => x.id.startsWith(`${filterId}${idChannelAppendix}`))) || Object.hasOwn(treeDefinition[key], 'required')) {\r\n\t\t\t\t\t\t\t\t\tawait this.createOrUpdateChannel(`${idChannel}`, Object.hasOwn(treeDefinition[key], 'channelName') ? treeDefinition[key].channelName(objDevices, objChannel, this) : key, Object.hasOwn(treeDefinition[key], 'icon') ? treeDefinition[key].icon : undefined, true);\r\n\t\t\t\t\t\t\t\t\tawait this.createOrUpdateGenericState(`${idChannel}`, treeDefinition[key].object, objValues[key], blacklistFilter, isWhiteList, objDevices, objChannel[key], isAdapterStart, `${filterId}${idChannelAppendix}.`, isWhiteList && _.some(blacklistFilter, { id: `${filterId}${idChannelAppendix}` }));\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t// channel is on blacklist\r\n\t\t\t\t\t\t\t\t\tif (await this.objectExists(idChannel)) {\r\n\t\t\t\t\t\t\t\t\t\tawait this.delObjectAsync(idChannel, { recursive: true });\r\n\t\t\t\t\t\t\t\t\t\tthis.log.info(`${logPrefix} ${logDetails ? `(${logDetails}) ` : ''}channel '${idChannel}' delete, ${isWhiteList ? 'it\\'s not on the whitelist' : 'it\\'s on the blacklist'}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// it's a channel from type array\r\n\t\t\t\t\t\t\tif (Object.hasOwn(treeDefinition[key], 'array') && Object.hasOwn(objValues, key)) {\r\n\r\n\t\t\t\t\t\t\t\tif (objValues[key] !== null && objValues[key].length > 0) {\r\n\t\t\t\t\t\t\t\t\tconst idChannelAppendix = Object.hasOwn(treeDefinition[key], 'idChannel') ? treeDefinition[key].idChannel : key\r\n\t\t\t\t\t\t\t\t\tconst idChannel = `${channel}.${idChannelAppendix}`;\r\n\r\n\t\t\t\t\t\t\t\t\tif ((!isWhiteList && !_.some(blacklistFilter, { id: `${filterId}${idChannelAppendix}` })) || (isWhiteList && _.some(blacklistFilter, (x) => x.id.startsWith(`${filterId}${idChannelAppendix}`))) || Object.hasOwn(treeDefinition[key], 'required')) {\r\n\t\t\t\t\t\t\t\t\t\tawait this.createOrUpdateChannel(`${idChannel}`, Object.hasOwn(treeDefinition[key], 'channelName') ? treeDefinition[key].channelName(objDevices, objChannel, this) : key, Object.hasOwn(treeDefinition[key], 'icon') ? treeDefinition[key].icon : undefined, isAdapterStart);\r\n\r\n\t\t\t\t\t\t\t\t\t\tconst arrayNumberAdd = Object.hasOwn(treeDefinition[key], 'arrayStartNumber') ? treeDefinition[key].arrayStartNumber : 0\r\n\r\n\t\t\t\t\t\t\t\t\t\tfor (let i = 0; i <= objValues[key].length - 1; i++) {\r\n\t\t\t\t\t\t\t\t\t\t\tlet nr = i + arrayNumberAdd;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tif (objValues[key][i] !== null && objValues[key][i] !== undefined) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet idChannelArray: string | undefined = myHelper.zeroPad(nr, treeDefinition[key].arrayChannelIdZeroPad || 0);\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tif (Object.hasOwn(treeDefinition[key], 'arrayChannelIdFromProperty')) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tidChannelArray = treeDefinition[key].arrayChannelIdFromProperty(objChannel[key][i], i, this);\r\n\t\t\t\t\t\t\t\t\t\t\t\t} else if (Object.hasOwn(treeDefinition[key], 'arrayChannelIdPrefix')) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tidChannelArray = treeDefinition[key].arrayChannelIdPrefix + myHelper.zeroPad(nr, treeDefinition[key].arrayChannelIdZeroPad || 0);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tif (idChannelArray !== undefined) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tawait this.createOrUpdateChannel(`${idChannel}.${idChannelArray}`, Object.hasOwn(treeDefinition[key], 'arrayChannelNameFromProperty') ? treeDefinition[key].arrayChannelNameFromProperty(objChannel[key][i], this) : treeDefinition[key].arrayChannelNamePrefix + nr || nr.toString(), undefined, true)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tawait this.createOrUpdateGenericState(`${idChannel}.${idChannelArray}`, treeDefinition[key].array, objValues[key][i], blacklistFilter, isWhiteList, objDevices, objChannel[key][i], true, `${filterId}${idChannelAppendix}.`, isWhiteList && _.some(blacklistFilter, { id: `${filterId}${idChannelAppendix}` }));\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t// channel is on blacklist, wlan is comming from realtime api\r\n\t\t\t\t\t\t\t\t\t\tif (await this.objectExists(idChannel)) {\r\n\t\t\t\t\t\t\t\t\t\t\tawait this.delObjectAsync(idChannel, { recursive: true });\r\n\t\t\t\t\t\t\t\t\t\t\tthis.log.info(`${logPrefix} ${logDetails ? `(${logDetails}) ` : ''}channel '${idChannel}' delete, ${isWhiteList ? 'it\\'s not on the whitelist' : 'it\\'s on the blacklist'}`);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} catch (error: any) {\r\n\t\t\t\t\t\tthis.log.error(`${logPrefix} [id: ${key}, ${logDetails ? `${logDetails}, ` : ''}key: ${key}] error: ${error}, stack: ${error.stack}, data: ${JSON.stringify(objValues[key])}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error: any) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tasync getCommonGenericState(id: string, treeDefinition: { [key: string]: myCommonState }, objDevices: any, logMsgState: string) {\r\n\t\tconst logPrefix = '[getCommonGenericState]:';\r\n\r\n\t\ttry {\r\n\t\t\t// i18x translation if exists\r\n\t\t\tconst i18n = myI18n.getTranslatedObject(treeDefinition[id].name || id);\r\n\t\t\tconst name = Object.keys(i18n).length > 1 ? i18n : (treeDefinition[id].name || id);\r\n\r\n\t\t\tconst common: any = {\r\n\t\t\t\tname: name,\r\n\t\t\t\ttype: treeDefinition[id].iobType,\r\n\t\t\t\tread: (treeDefinition[id].read !== undefined) ? treeDefinition[id].read : true,\r\n\t\t\t\twrite: (treeDefinition[id].write !== undefined) ? treeDefinition[id].write : false,\r\n\t\t\t\trole: treeDefinition[id].role ? treeDefinition[id].role : 'state',\r\n\t\t\t};\r\n\r\n\t\t\tif (treeDefinition[id].unit) common.unit = treeDefinition[id].unit;\r\n\r\n\t\t\tif (treeDefinition[id].min || treeDefinition[id].min === 0) common.min = treeDefinition[id].min;\r\n\r\n\t\t\tif (treeDefinition[id].max || treeDefinition[id].max === 0) common.max = treeDefinition[id].max;\r\n\r\n\t\t\tif (treeDefinition[id].step) common.step = treeDefinition[id].step;\r\n\r\n\t\t\tif (treeDefinition[id].expert) common.expert = treeDefinition[id].expert;\r\n\r\n\t\t\tif (treeDefinition[id].def || treeDefinition[id].def === 0 || treeDefinition[id].def === false) common.def = treeDefinition[id].def;\r\n\r\n\t\t\tif (treeDefinition[id].states) {\r\n\t\t\t\tcommon.states = treeDefinition[id].states;\r\n\t\t\t} else if (Object.hasOwn(treeDefinition[id], 'statesFromProperty')) {\r\n\t\t\t\tconst statesFromProp = myHelper.getAllowedCommonStates(treeDefinition[id].statesFromProperty, objDevices);\r\n\r\n\t\t\t\tcommon.states = statesFromProp;\r\n\t\t\t\tthis.log.debug(`${logPrefix} ${objDevices?.name} - set allowed common.states for '${logMsgState}' (from: ${treeDefinition[id].statesFromProperty})`);\r\n\t\t\t}\r\n\r\n\t\t\tif (treeDefinition[id].desc) common.desc = treeDefinition[id].desc;\r\n\r\n\t\t\treturn common;\r\n\t\t} catch (error: any) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\t//#endregion\r\n}\r\n\r\nif (require.main !== module) {\r\n\t// Export the constructor in compact mode\r\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Openmediavault(options);\r\n} else {\r\n\t// otherwise start the instance directly\r\n\t(() => new Openmediavault())();\r\n}"],
  "mappings": "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",
  "names": ["_"]
}
