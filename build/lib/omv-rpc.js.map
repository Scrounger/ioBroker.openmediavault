{
  "version": 3,
  "sources": ["../../src/lib/omv-rpc.ts"],
  "sourcesContent": ["import fetch from 'node-fetch';\nimport fetchCookie, { FetchCookieImpl } from 'fetch-cookie';\nimport { CookieJar } from 'tough-cookie';\nimport https from 'https';\nimport * as url from 'url';\n\nimport * as myTypes from './myTypes.js'\nimport { IoBrokerObjectDefinitions } from './myTypes.js';\n\nexport class OmvApi {\n    private logPrefix: string = 'OmvApi';\n\n    public isConnected = false;\n\n    private adapter: ioBroker.Adapter;\n    private log: ioBroker.Logger;\n\n    url: URL;\n    httpsAgent: https.Agent | undefined = undefined;\n    private jar: CookieJar;\n    private fetchWithCookies: FetchCookieImpl<fetch.RequestInfo, fetch.RequestInit, fetch.Response>;\n\n\n    public constructor(adapter: ioBroker.Adapter) {\n        this.adapter = adapter;\n        this.log = adapter.log;\n\n        this.url = new url.URL(`${this.adapter.config.url}/rpc.php`)\n\n        if (this.adapter.config.ignoreSSLCertificate && this.url.protocol === 'https:') {\n            this.httpsAgent = new https.Agent({\n                rejectUnauthorized: false,\n            });\n        }\n\n        this.jar = new CookieJar();\n        this.fetchWithCookies = fetchCookie(fetch, this.jar);\n    }\n\n    public async login() {\n        const logPrefix = `[${this.logPrefix}.login]:`;\n\n        try {\n            const response = await this.fetchWithCookies(this.url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(this.getEndpointData(ApiEndpoints.login)),\n                agent: this.httpsAgent,\n            });\n\n            if (response.ok) {\n                const result = await response.json();\n\n                if (result && response) {\n                    if (result.response.authenticated) {\n                        this.log.debug(`${logPrefix} result: ${JSON.stringify(result)}`);\n\n                        this.log.info(`${logPrefix} login to OpenMediaVault successful`);\n\n                        await this.setConnectionStatus(true)\n\n                        return;\n                    } else {\n                        this.log.error(`${logPrefix} OpenMediaVault authenticated failed`);\n                    }\n                } else {\n                    this.log.error(`${logPrefix} OpenMediaVault no data in repsonse`);\n                }\n            } else {\n                this.log.error(`${logPrefix} HTTP error! Status: ${response.status} - ${response.statusText}`);\n            }\n\n        } catch (error: any) {\n            this.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\n        }\n\n        await this.setConnectionStatus(false);\n    }\n\n    public async retrievData(endpoint: ApiEndpoints) {\n        const logPrefix = `[${this.logPrefix}.retrievData]:`;\n\n        try {\n            const response = await this.fetchWithCookies(this.url, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(this.getEndpointData(endpoint)),\n                agent: this.httpsAgent,\n            });\n\n            if (response.ok) {\n                const result = await response.json();\n\n                if (result && result.response) {\n                    this.log.debug(`${logPrefix} reponse data for endpoint '${endpoint}': ${JSON.stringify(result)}`);\n\n                    if (result.response.data) {\n                        return result.response.data;\n                    } else {\n                        return result.response;\n                    }\n                } else {\n                    if (result && result.error) {\n                        this.log.error(`${logPrefix} OpenMediaVault error: ${result.error}`);\n                    } else {\n                        this.log.error(`${logPrefix} OpenMediaVault no data in repsonse`);\n                    }\n\n                    return undefined;\n                }\n            } else {\n                this.log.error(`${logPrefix} HTTP error! Status: ${response.status} - ${response.statusText}`);\n            }\n\n        } catch (error: any) {\n            this.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\n        }\n\n        await this.setConnectionStatus(false);\n        return undefined;\n    }\n\n    public async logout() {\n        const logPrefix = `[${this.logPrefix}.logout]:`;\n\n        try {\n            const response = await this.fetchWithCookies(this.url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(this.getEndpointData(ApiEndpoints.login)),\n                agent: this.httpsAgent,\n            });\n\n            if (response.ok) {\n                this.log.info(`${logPrefix} login from OpenMediaVault successful`);\n\n                const result = await response.json();\n                this.log.info(JSON.stringify(result));\n            }\n        } catch (error: any) {\n            this.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\n        }\n\n        await this.setConnectionStatus(false);\n    }\n\n    private getEndpointData(endpoint: ApiEndpoints): myTypes.EndpointData {\n        switch (endpoint) {\n            case ApiEndpoints.login:\n                return {\n                    service: 'session',\n                    method: 'login',\n                    params: {\n                        username: this.adapter.config.user,\n                        password: this.adapter.config.password,\n                    },\n                }\n            case ApiEndpoints.logout:\n                return {\n                    service: 'session',\n                    method: 'logout',\n                    params: null,\n                }\n            case ApiEndpoints.hwInfo:\n                return {\n                    service: 'System',\n                    method: 'getInformation',\n                    params: null,\n                }\n            case ApiEndpoints.disk:\n                return {\n                    service: 'DiskMgmt',\n                    method: 'enumerateDevices',\n                    params: null,\n                }\n            case ApiEndpoints.smart:\n                return {\n                    service: 'Smart',\n                    method: 'getList',\n                    params: {\n                        start: 0,\n                        limit: -1\n                    }\n                }\n            case ApiEndpoints.fileSystem:\n                return {\n                    service: 'FileSystemMgmt',\n                    method: 'enumerateMountedFilesystems',\n                }\n            case ApiEndpoints.shareMgmt:\n                return {\n                    service: 'ShareMgmt',\n                    method: 'enumerateSharedFolders',\n                    params: {\n                        start: 0,\n                        limit: -1\n                    }\n                }\n            case ApiEndpoints.service:\n                return {\n                    service: 'Services',\n                    method: 'getStatus',\n                }\n            case ApiEndpoints.plugin:\n                return {\n                    service: 'Plugin',\n                    method: 'enumeratePlugins',\n                }\n            case ApiEndpoints.network:\n                return {\n                    service: 'Network',\n                    method: 'enumerateDevices',\n                }\n            case ApiEndpoints.kvm:\n                return {\n                    service: 'Kvm',\n                    method: 'getVmList',\n                }\n            default:\n                return {\n                    service: 'System',\n                    method: 'getInformation',\n                }\n        }\n    }\n\n    /** Set adapter info.connection state and internal var\n    * @param {boolean} isConnected\n    */\n    private async setConnectionStatus(isConnected: boolean) {\n        const logPrefix = `[${this.logPrefix}.setConnectionStatus]:`;\n\n        try {\n            this.isConnected = isConnected;\n            await this.adapter.setState('info.connection', isConnected, true);\n        } catch (error: any) {\n            this.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\n        }\n    }\n}\n\nexport enum ApiEndpoints {\n    login = 'login',\n    logout = 'logout',\n\n    // tree classes must have the same name like enums\n    hwInfo = 'hwInfo',\n    disk = 'disk',\n    smart = 'smart',\n    fileSystem = 'fileSystem',\n    shareMgmt = 'shareMgmt',\n    service = 'service',\n    plugin = 'plugin',\n    network = 'network',\n    kvm = 'kvm'\n}\n\nexport const iobObjectDef: { [key: string]: IoBrokerObjectDefinitions; } = {\n    hwInfo: {\n        channelName: 'hardware info',\n        deviceIdProperty: undefined,\n        deviceNameProperty: undefined,\n    },\n    disk: {\n        channelName: 'disk info',\n        deviceIdProperty: 'devicename',\n        deviceNameProperty: 'devicename',\n    },\n    smart: {\n        channelName: 'S.M.A.R.T info',\n        deviceIdProperty: 'uuid',\n        deviceNameProperty: 'devicename',\n    },\n    fileSystem: {\n        channelName: 'file system info',\n        deviceIdProperty: 'uuid',\n        deviceNameProperty: 'comment',\n    },\n    shareMgmt: {\n        channelName: 'shared folders',\n        deviceIdProperty: 'uuid',\n        deviceNameProperty: 'name',\n    }\n}"],
  "mappings": "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",
  "names": ["https", "fetchCookie", "fetch", "ApiEndpoints"]
}
