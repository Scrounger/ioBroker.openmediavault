{
  "version": 3,
  "sources": ["../../src/lib/omv-rpc.ts"],
  "sourcesContent": ["import fetch from 'node-fetch';\r\nimport fetchCookie, { FetchCookieImpl } from 'fetch-cookie';\r\nimport { CookieJar } from 'tough-cookie';\r\nimport https from 'https';\r\nimport * as url from 'url';\r\n\r\nimport * as myTypes from './myTypes.js'\r\n\r\nexport class OmvApi {\r\n    private logPrefix: string = 'OmvApi';\r\n\r\n    public isConnected = false;\r\n\r\n    private adapter: ioBroker.Adapter;\r\n    private log: ioBroker.Logger;\r\n\r\n    url: URL;\r\n    httpsAgent: https.Agent | undefined = undefined;\r\n    private jar: CookieJar;\r\n    private fetchWithCookies: FetchCookieImpl<fetch.RequestInfo, fetch.RequestInit, fetch.Response>;\r\n\r\n\r\n    public constructor(adapter: ioBroker.Adapter) {\r\n        this.adapter = adapter;\r\n        this.log = adapter.log;\r\n\r\n        this.url = new url.URL(`${this.adapter.config.url}/rpc.php`)\r\n\r\n        if (this.adapter.config.ignoreSSLCertificate && this.url.protocol === 'https:') {\r\n            this.httpsAgent = new https.Agent({\r\n                rejectUnauthorized: false,\r\n            });\r\n        }\r\n\r\n        this.jar = new CookieJar();\r\n        this.fetchWithCookies = fetchCookie(fetch, this.jar);\r\n    }\r\n\r\n    public async login() {\r\n        const logPrefix = `[${this.logPrefix}.login]:`;\r\n\r\n        try {\r\n            const response = await this.fetchWithCookies(this.url, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(this.getEndpointData(ApiEndpoints.login)),\r\n                agent: this.httpsAgent,\r\n                signal: AbortSignal.timeout(2000),\r\n            });\r\n\r\n            if (response.ok) {\r\n                const result = await response.json();\r\n\r\n                if (result && response) {\r\n                    if (result.response.authenticated) {\r\n                        this.log.debug(`${logPrefix} result: ${JSON.stringify(result)}`);\r\n\r\n                        this.log.info(`${logPrefix} login to OpenMediaVault successful`);\r\n\r\n                        await this.setConnectionStatus(true)\r\n\r\n                        return;\r\n                    } else {\r\n                        this.log.error(`${logPrefix} OpenMediaVault authenticated failed`);\r\n                    }\r\n                } else {\r\n                    this.log.error(`${logPrefix} OpenMediaVault no data in repsonse`);\r\n                }\r\n            } else {\r\n                this.log.error(`${logPrefix} HTTP error! Status: ${response.status} - ${response.statusText}`);\r\n            }\r\n\r\n        } catch (error: any) {\r\n            if (error.name === \"TimeoutError\") {\r\n                this.log.error(`${logPrefix} no connection to OpenMediaVault - timeout!`);\r\n            } else {\r\n                this.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n            }\r\n        }\r\n\r\n        await this.setConnectionStatus(false);\r\n    }\r\n\r\n    public async retrievData(endpoint: ApiEndpoints) {\r\n        const logPrefix = `[${this.logPrefix}.retrievData]:`;\r\n\r\n        try {\r\n            const response = await this.fetchWithCookies(this.url, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(this.getEndpointData(endpoint)),\r\n                agent: this.httpsAgent,\r\n                signal: AbortSignal.timeout(2000),\r\n            });\r\n\r\n            if (response.ok) {\r\n                const result = await response.json();\r\n\r\n                if (result && result.response) {\r\n                    this.log.debug(`${logPrefix} reponse data for endpoint '${endpoint}': ${JSON.stringify(result)}`);\r\n\r\n                    if (result.response.data) {\r\n                        return result.response.data;\r\n                    } else {\r\n                        return result.response;\r\n                    }\r\n                } else {\r\n                    if (result && result.error) {\r\n                        this.log.error(`${logPrefix} OpenMediaVault error: ${result.error}`);\r\n                    } else {\r\n                        this.log.error(`${logPrefix} OpenMediaVault no data in repsonse`);\r\n                    }\r\n\r\n                    return undefined;\r\n                }\r\n            } else {\r\n                this.log.error(`${logPrefix} HTTP error! Status: ${response.status} - ${response.statusText}`);\r\n            }\r\n\r\n        } catch (error: any) {\r\n            if (error.name && error.name === \"TimeoutError\") {\r\n                this.log.error(`${logPrefix} no connection to OpenMediaVault - timeout!`);\r\n            } else {\r\n                this.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n            }\r\n        }\r\n\r\n        await this.setConnectionStatus(false);\r\n        return undefined;\r\n    }\r\n\r\n    public async logout() {\r\n        const logPrefix = `[${this.logPrefix}.logout]:`;\r\n\r\n        try {\r\n            const response = await this.fetchWithCookies(this.url, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(this.getEndpointData(ApiEndpoints.login)),\r\n                agent: this.httpsAgent,\r\n                signal: AbortSignal.timeout(2000),\r\n            });\r\n\r\n            if (response.ok) {\r\n                this.log.info(`${logPrefix} login from OpenMediaVault successful`);\r\n\r\n                const result = await response.json();\r\n                this.log.info(JSON.stringify(result));\r\n            }\r\n        } catch (error: any) {\r\n            if (error.name && error.name === \"TimeoutError\") {\r\n                this.log.error(`${logPrefix} no connection to OpenMediaVault - timeout!`);\r\n            } else {\r\n                this.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n            }\r\n        }\r\n\r\n        await this.setConnectionStatus(false);\r\n    }\r\n\r\n    private getEndpointData(endpoint: ApiEndpoints): myTypes.EndpointData {\r\n        switch (endpoint) {\r\n            case ApiEndpoints.login:\r\n                return {\r\n                    service: 'session',\r\n                    method: 'login',\r\n                    params: {\r\n                        username: this.adapter.config.user,\r\n                        password: this.adapter.config.password,\r\n                    },\r\n                }\r\n            case ApiEndpoints.logout:\r\n                return {\r\n                    service: 'session',\r\n                    method: 'logout',\r\n                    params: null,\r\n                }\r\n            case ApiEndpoints.hwInfo:\r\n                return {\r\n                    service: 'System',\r\n                    method: 'getInformation',\r\n                    params: null,\r\n                }\r\n            case ApiEndpoints.disk:\r\n                return {\r\n                    service: 'DiskMgmt',\r\n                    method: 'enumerateDevices',\r\n                    params: null,\r\n                }\r\n            case ApiEndpoints.smart:\r\n                return {\r\n                    service: 'Smart',\r\n                    method: 'getList',\r\n                    params: {\r\n                        start: 0,\r\n                        limit: -1,\r\n                    }\r\n                }\r\n            case ApiEndpoints.fileSystem:\r\n                return {\r\n                    service: 'FileSystemMgmt',\r\n                    method: 'enumerateMountedFilesystems',\r\n                    params: null,\r\n                }\r\n            case ApiEndpoints.shareMgmt:\r\n                return {\r\n                    service: 'ShareMgmt',\r\n                    method: 'enumerateSharedFolders',\r\n                    params: {\r\n                        start: 0,\r\n                        limit: -1,\r\n                    }\r\n                }\r\n            case ApiEndpoints.smb:\r\n                return {\r\n                    service: 'SMB',\r\n                    method: 'getShareList',\r\n                    params: {\r\n                        start: 0,\r\n                        limit: -1,\r\n                    }\r\n                }\r\n            case ApiEndpoints.fsTab:\r\n                return {\r\n                    service: 'FsTab',\r\n                    method: 'enumerateEntries',\r\n                    params: null,\r\n                }\r\n            case ApiEndpoints.service:\r\n                return {\r\n                    service: 'Services',\r\n                    method: 'getStatus',\r\n                    params: null,\r\n                }\r\n            case ApiEndpoints.plugin:\r\n                return {\r\n                    service: 'Plugin',\r\n                    method: 'enumeratePlugins',\r\n                    params: null,\r\n                }\r\n            case ApiEndpoints.network:\r\n                return {\r\n                    service: 'Network',\r\n                    method: 'enumerateDevices',\r\n                    params: null,\r\n                }\r\n            case ApiEndpoints.kvm:\r\n                return {\r\n                    service: 'Kvm',\r\n                    method: 'getVmList',\r\n                    params: null,\r\n                }\r\n            default:\r\n                return {\r\n                    service: 'System',\r\n                    method: 'getInformation',\r\n                    params: null,\r\n                }\r\n        }\r\n    }\r\n\r\n    /** Set adapter info.connection state and internal var\r\n    * @param {boolean} isConnected\r\n    */\r\n    private async setConnectionStatus(isConnected: boolean) {\r\n        const logPrefix = `[${this.logPrefix}.setConnectionStatus]:`;\r\n\r\n        try {\r\n            this.isConnected = isConnected;\r\n            await this.adapter.setState('info.connection', isConnected, true);\r\n        } catch (error: any) {\r\n            this.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n        }\r\n    }\r\n}\r\n\r\nexport enum ApiEndpoints {\r\n    login = 'login',\r\n    logout = 'logout',\r\n\r\n    // tree classes must have the same name like enums\r\n    hwInfo = 'hwInfo',\r\n    disk = 'disk',\r\n    smart = 'smart',\r\n    fileSystem = 'fileSystem',\r\n    shareMgmt = 'shareMgmt',\r\n    smb = 'smb',\r\n    fsTab = 'fsTab',\r\n    service = 'service',\r\n    plugin = 'plugin',\r\n    network = 'network',\r\n    kvm = 'kvm'\r\n}"],
  "mappings": "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",
  "names": ["https", "fetchCookie", "fetch", "ApiEndpoints"]
}
