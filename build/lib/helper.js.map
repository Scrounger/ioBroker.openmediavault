{
  "version": 3,
  "sources": ["../../src/lib/helper.ts"],
  "sourcesContent": ["import _ from \"lodash\";\nimport { myCommonState, myCommoneChannelObject, myCommonChannelArray } from \"./myTypes.js\";\n\nexport function isDeviceCommonEqual(objCommon: ioBroker.DeviceCommon, myCommon: ioBroker.DeviceCommon): boolean {\n    return (!myCommon.name || _.isEqual(objCommon.name, myCommon.name)) &&\n        (!myCommon.icon || objCommon.icon === myCommon.icon) &&\n        objCommon.desc === myCommon.desc &&\n        objCommon.role === myCommon.role &&\n        _.isEqual(objCommon.statusStates, myCommon.statusStates)\n}\n\nexport function isChannelCommonEqual(objCommon: ioBroker.ChannelCommon, myCommon: ioBroker.ChannelCommon): boolean {\n    return (!myCommon.name || _.isEqual(objCommon.name, myCommon.name)) &&\n        (!myCommon.icon || objCommon.icon === myCommon.icon) &&\n        objCommon.desc === myCommon.desc &&\n        objCommon.role === myCommon.role\n}\n\nexport function getObjectByString(path: any, obj: any, separator = '.') {\n    const properties = Array.isArray(path) ? path : path.split(separator);\n    return properties.reduce((prev: any, curr: any) => prev?.[curr], obj);\n}\n\nexport function getAllowedCommonStates(path: any, obj: any, separator = '.') {\n    const objByString = getObjectByString(path, obj, separator);\n    const states: any = {};\n\n    if (objByString) {\n        for (const str of objByString) {\n            states[str] = str;\n        }\n\n        return states;\n    }\n\n    return undefined;\n}\n\n/** Compare common properties of State\n * @param {ioBroker.StateCommon} objCommon\n * @param {ioBroker.StateCommon} myCommon\n * @returns {boolean}\n */\nexport function isStateCommonEqual(objCommon: ioBroker.StateCommon, myCommon: ioBroker.StateCommon): boolean {\n    return _.isEqual(objCommon.name, myCommon.name) &&\n        _.isEqual(objCommon.type, myCommon.type) &&\n        _.isEqual(objCommon.read, myCommon.read) &&\n        _.isEqual(objCommon.write, myCommon.write) &&\n        _.isEqual(objCommon.role, myCommon.role) &&\n        _.isEqual(objCommon.def, myCommon.def) &&\n        _.isEqual(objCommon.unit, myCommon.unit) &&\n        _.isEqual(objCommon.icon, myCommon.icon) &&\n        _.isEqual(objCommon.desc, myCommon.desc) &&\n        _.isEqual(objCommon.max, myCommon.max) &&\n        _.isEqual(objCommon.min, myCommon.min) &&\n        _.isEqual(objCommon.states, myCommon.states);\n}\n\nexport function zeroPad(source: any, places: number): string {\n    const zero = places - source.toString().length + 1;\n    return Array(+(zero > 0 && zero)).join('0') + source;\n}\n\n/**\n * Id without last part\n * @param id \n * @returns \n */\nexport function getIdWithoutLastPart(id: string): string {\n    const lastIndex = id.lastIndexOf('.');\n    return id.substring(0, lastIndex);\n}\n\n/**\n * last part of id\n * @param id \n * @returns \n */\nexport function getIdLastPart(id: string): string {\n    let result = id.split('.').pop();\n    return result ? result : \"\";\n}\n\n/**\n * Compare two objects and return properties that are diffrent\n *\n * @param object\n * @param base\n * @param adapter\n * @param allowedKeys\n * @param prefix\n * @returns\n */\nexport const deepDiffBetweenObjects = (object: any, base: any, adapter: ioBroker.Adapter, allowedKeys: any = undefined, prefix: string = ''): any => {\n    const logPrefix = '[deepDiffBetweenObjects]:';\n\n    try {\n        const changes = (object: any, base: any, prefixInner = ''): any => {\n            return _.transform(object, (result, value, key) => {\n                const fullKey: string = prefixInner ? `${prefixInner}.${key as string}` : (key as string);\n\n                try {\n                    if (!_.isEqual(value, base[key]) && ((allowedKeys && allowedKeys.includes(fullKey)) || allowedKeys === undefined)) {\n                        if (_.isArray(value)) {\n\n                            if (_.some(value, (item: any) => _.isObject(item))) {\n                                // objects in array exists\n                                const tmp = [];\n                                let empty = true;\n\n                                for (let i = 0; i <= value.length - 1; i++) {\n                                    const res = deepDiffBetweenObjects(value[i], base[key] && base[key][i] ? base[key][i] : {}, adapter, allowedKeys, fullKey);\n\n                                    if (!_.isEmpty(res) || res === 0 || res === false) {\n                                        // if (!_.has(result, key)) result[key] = [];\n                                        tmp.push(res);\n                                        empty = false;\n                                    } else {\n                                        tmp.push(null);\n                                    }\n                                }\n\n                                if (!empty) {\n                                    result[key] = tmp;\n                                }\n                            } else {\n                                // is pure array\n                                adapter.log.warn(`${key.toString()}: pure Array (base: ${base[key]}, val: ${value})`);\n                                if (!_.isEqual(value, base[key])) {\n                                    result[key] = value\n                                }\n                            }\n                        } else if (_.isObject(value) && _.isObject(base[key])) {\n                            const res = changes(value, base[key] ? base[key] : {}, fullKey);\n                            if (!_.isEmpty(res) || res === 0 || res === false) {\n                                result[key] = res;\n                            }\n                        } else {\n                            result[key] = value;\n                        }\n                    }\n                } catch (error: any) {\n                    adapter.log.error(`${logPrefix} transform error: ${error}, stack: ${error.stack}, fullKey: ${fullKey}, object: ${JSON.stringify(object)}, base: ${JSON.stringify(base)}`);\n                }\n            });\n        };\n\n        return changes(object, base, prefix);\n    } catch (error: any) {\n        adapter.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}, object: ${JSON.stringify(object)}, base: ${JSON.stringify(base)}`);\n    }\n\n    return object;\n};\n\n/**\n * Collect all properties used in tree defintions\n *\n * @param treefDefintion @see tree-devices.ts @see tree-clients.ts\n * @returns\n */\nexport function getAllKeysOfTreeDefinition(treefDefintion: { [key: string]: myCommonState | myCommoneChannelObject | myCommonChannelArray }): string[] {\n    const keys: any = [];\n\n    // Hilfsfunktion f\u00FCr rekursive Durchsuchung des Objekts\n    function recurse(currentObj: any, prefix = ''): void {\n        _.forOwn(currentObj, (value, key) => {\n            const fullKey = (prefix ? `${prefix}.${key}` : key).replace('.array', '').replace('.object', '');\n\n            // Wenn der Wert ein Objekt ist (und kein Array), dann weiter rekursiv gehen\n            if (_.isObject(value) && typeof value !== 'function' && key !== 'states') {\n                keys.push(fullKey);\n\n                // Wenn es ein Array oder Object ist, dann rekursiv weitergehen\n                if (_.isArray(value) || _.isObject(value)) {\n                    // Nur unter \"array\" oder \"object\" rekursiv weiter\n                    recurse(value, fullKey);\n                }\n            } else {\n                if (key === 'valFromProperty') {\n                    const prefixCleared = getIdWithoutLastPart(prefix);\n                    keys.push(`${prefixCleared ? `${prefixCleared}.` : ''}${value}`);\n                }\n            }\n        });\n    }\n\n    // Start der Rekursion\n    recurse(treefDefintion);\n\n    return _.uniq(keys);\n}\n\nexport function getAllIdsOfTreeDefinition(treefDefintion: { [key: string]: myCommonState | myCommoneChannelObject | myCommonChannelArray }): string[] {\n    const keys: any = [];\n\n    // Hilfsfunktion f\u00FCr rekursive Durchsuchung des Objekts\n    function recurse(currentObj: any, prefix = ''): void {\n        _.forOwn(currentObj, (value, key) => {\n            let fullKey = prefix ? `${prefix}.${key}` : key;\n\n            if (Object.hasOwn(value, 'idChannel') && !_.isObject(value.idChannel)) {\n                fullKey = prefix ? `${prefix}.${value.idChannel}` : value.idChannel;\n            } else if (Object.hasOwn(value, 'id') && !_.isObject(value.id)) {\n                fullKey = prefix ? `${prefix}.${value.id}` : value.id;\n            }\n\n            fullKey = fullKey.replace('.array', '').replace('.object', '');\n\n            // Wenn der Wert ein Objekt ist (und kein Array), dann weiter rekursiv gehen\n            if (_.isObject(value) && typeof value !== 'function' && key !== 'states') {\n                if (!_.has(value, 'required')) {\n                    keys.push(fullKey);\n                }\n\n                // Wenn es ein Array oder Object ist, dann rekursiv weitergehen\n                if (_.isArray(value) || _.isObject(value)) {\n                    // Nur unter \"array\" oder \"object\" rekursiv weiter\n                    recurse(value, fullKey);\n                }\n            }\n        });\n    }\n\n    // Start der Rekursion\n    recurse(treefDefintion);\n\n    return _.uniq(keys);\n}\n\nexport function radioToFrequency(radioVal: string, adapter: ioBroker.Adapter): string {\n    if (radioVal === 'ng') {\n        return '2.4 GHz'\n    } else if (radioVal === 'na') {\n        return '5 GHz'\n    } else {\n        adapter.log.warn(`radio ${radioVal} interpreter not implemented! Please create an issue on github.`);\n        return radioVal\n    }\n}\n\nexport function radio_nameToFrequency(radio_nameVal: string, adapter: ioBroker.Adapter): string {\n    if (radio_nameVal === 'wifi0' || radio_nameVal === 'ra0') {\n        return '2.4 GHz'\n    } else if (radio_nameVal === 'wifi1' || radio_nameVal === 'rai0') {\n        return '5 GHz'\n    } else {\n        adapter.log.warn(`radio ${radio_nameVal} interpreter not implemented! Please create an issue on github.`);\n        return 'n/a'\n    }\n}"],
  "mappings": "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",
  "names": ["_", "object", "base"]
}
