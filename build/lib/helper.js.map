{
  "version": 3,
  "sources": ["../../src/lib/helper.ts"],
  "sourcesContent": ["import _ from 'lodash';\nimport type { myCommonState, myCommoneChannelObject, myCommonChannelArray } from './myTypes.js';\n\nexport function isDeviceCommonEqual(objCommon: ioBroker.DeviceCommon, myCommon: ioBroker.DeviceCommon): boolean {\n\treturn (!myCommon.name || _.isEqual(objCommon.name, myCommon.name)) &&\n\t\t(!myCommon.icon || objCommon.icon === myCommon.icon) &&\n\t\tobjCommon.desc === myCommon.desc &&\n\t\tobjCommon.role === myCommon.role &&\n\t\t_.isEqual(objCommon.statusStates, myCommon.statusStates)\n}\n\nexport function isChannelCommonEqual(objCommon: ioBroker.ChannelCommon, myCommon: ioBroker.ChannelCommon): boolean {\n\treturn (!myCommon.name || _.isEqual(objCommon.name, myCommon.name)) &&\n\t\t(!myCommon.icon || objCommon.icon === myCommon.icon) &&\n\t\tobjCommon.desc === myCommon.desc &&\n\t\tobjCommon.role === myCommon.role\n}\n\nexport function getObjectByString(path: any, obj: any, separator = '.'): any {\n\tconst properties = Array.isArray(path) ? path : path.split(separator);\n\treturn properties.reduce((prev: any, curr: any) => prev?.[curr], obj);\n}\n\nexport function getAllowedCommonStates(path: any, obj: any, separator = '.'): any {\n\tconst objByString = getObjectByString(path, obj, separator);\n\tconst states: any = {};\n\n\tif (objByString) {\n\t\tfor (const str of objByString) {\n\t\t\tstates[str] = str;\n\t\t}\n\n\t\treturn states;\n\t}\n\n\treturn undefined;\n}\n\n/**\n * Compare common properties of State\n * \n * @param {ioBroker.StateCommon} objCommon\n * @param {ioBroker.StateCommon} myCommon\n * @returns {boolean}\n */\n\nexport function isStateCommonEqual(objCommon: ioBroker.StateCommon, myCommon: ioBroker.StateCommon): boolean {\n\treturn _.isEqual(objCommon.name, myCommon.name) &&\n\t\t_.isEqual(objCommon.type, myCommon.type) &&\n\t\t_.isEqual(objCommon.read, myCommon.read) &&\n\t\t_.isEqual(objCommon.write, myCommon.write) &&\n\t\t_.isEqual(objCommon.role, myCommon.role) &&\n\t\t_.isEqual(objCommon.def, myCommon.def) &&\n\t\t_.isEqual(objCommon.unit, myCommon.unit) &&\n\t\t_.isEqual(objCommon.icon, myCommon.icon) &&\n\t\t_.isEqual(objCommon.desc, myCommon.desc) &&\n\t\t_.isEqual(objCommon.max, myCommon.max) &&\n\t\t_.isEqual(objCommon.min, myCommon.min) &&\n\t\t_.isEqual(objCommon.states, myCommon.states);\n}\n\nexport function zeroPad(source: any, places: number): string {\n\tconst zero = places - source.toString().length + 1;\n\treturn Array(+(zero > 0 && zero)).join('0') + source;\n}\n\n/**\n * Id without last part\n * \n * @param id\n * @returns\n */\nexport function getIdWithoutLastPart(id: string): string {\n\tconst lastIndex = id.lastIndexOf('.');\n\treturn id.substring(0, lastIndex);\n}\n\n/**\n * last part of id\n * \n * @param id\n * @returns\n */\nexport function getIdLastPart(id: string): string {\n\tconst result = id.split('.').pop();\n\treturn result ? result : '';\n}\n\n/**\n * Compare two objects and return properties that are diffrent\n *\n * @param object\n * @param base\n * @param adapter\n * @param allowedKeys\n * @param prefix\n * @returns\n */\nexport const deepDiffBetweenObjects = (object: any, base: any, adapter: ioBroker.Adapter, allowedKeys: any = undefined, prefix: string = ''): any => {\n\tconst logPrefix = '[deepDiffBetweenObjects]:';\n\n\ttry {\n\t\tconst changes = (object: any, base: any, prefixInner = ''): any => {\n\t\t\treturn _.transform(object, (result, value, key) => {\n\t\t\t\tconst fullKey: string = prefixInner ? `${prefixInner}.${key as string}` : (key as string);\n\n\t\t\t\ttry {\n\t\t\t\t\tif (!_.isEqual(value, base[key]) && ((allowedKeys && allowedKeys.includes(fullKey)) || allowedKeys === undefined)) {\n\t\t\t\t\t\tif (_.isArray(value)) {\n\n\t\t\t\t\t\t\tif (_.some(value, (item: any) => _.isObject(item))) {\n\t\t\t\t\t\t\t\t// objects in array exists\n\t\t\t\t\t\t\t\tconst tmp = [];\n\t\t\t\t\t\t\t\tlet empty = true;\n\n\t\t\t\t\t\t\t\tfor (let i = 0; i <= value.length - 1; i++) {\n\t\t\t\t\t\t\t\t\tconst res = deepDiffBetweenObjects(value[i], base[key] && base[key][i] ? base[key][i] : {}, adapter, allowedKeys, fullKey);\n\n\t\t\t\t\t\t\t\t\tif (!_.isEmpty(res) || res === 0 || res === false) {\n\t\t\t\t\t\t\t\t\t\t// if (!_.has(result, key)) result[key] = [];\n\t\t\t\t\t\t\t\t\t\ttmp.push(res);\n\t\t\t\t\t\t\t\t\t\tempty = false;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ttmp.push(null);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (!empty) {\n\t\t\t\t\t\t\t\t\tresult[key] = tmp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// is pure array\n\t\t\t\t\t\t\t\tif (!_.isEqual(value, base[key])) {\n\t\t\t\t\t\t\t\t\tresult[key] = value\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (_.isObject(value) && _.isObject(base[key])) {\n\t\t\t\t\t\t\tconst res = changes(value, base[key] ? base[key] : {}, fullKey);\n\t\t\t\t\t\t\tif (!_.isEmpty(res) || res === 0 || res === false) {\n\t\t\t\t\t\t\t\tresult[key] = res;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult[key] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (error: any) {\n\t\t\t\t\tadapter.log.error(`${logPrefix} transform error: ${error}, stack: ${error.stack}, fullKey: ${fullKey}, object: ${JSON.stringify(object)}, base: ${JSON.stringify(base)}`);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\treturn changes(object, base, prefix);\n\t} catch (error: any) {\n\t\tadapter.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}, object: ${JSON.stringify(object)}, base: ${JSON.stringify(base)}`);\n\t}\n\n\treturn object;\n};\n\n/**\n * Collect all properties used in tree defintions\n *\n * @param treefDefintion @see tree-devices.ts @see tree-clients.ts\n * @returns\n */\nexport function getAllKeysOfTreeDefinition(treefDefintion: { [key: string]: myCommonState | myCommoneChannelObject | myCommonChannelArray }): string[] {\n\tconst keys: any = [];\n\n\t// Hilfsfunktion f\u00FCr rekursive Durchsuchung des Objekts\n\tfunction recurse(currentObj: any, prefix = ''): void {\n\t\t_.forOwn(currentObj, (value, key) => {\n\t\t\tconst fullKey = (prefix ? `${prefix}.${key}` : key).replace('.array', '').replace('.object', '');\n\n\t\t\t// Wenn der Wert ein Objekt ist (und kein Array), dann weiter rekursiv gehen\n\t\t\tif (_.isObject(value) && typeof value !== 'function' && key !== 'states') {\n\t\t\t\tkeys.push(fullKey);\n\n\t\t\t\t// Wenn es ein Array oder Object ist, dann rekursiv weitergehen\n\t\t\t\tif (_.isArray(value) || _.isObject(value)) {\n\t\t\t\t\t// Nur unter 'array' oder 'object' rekursiv weiter\n\t\t\t\t\trecurse(value, fullKey);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (key === 'valFromProperty') {\n\t\t\t\t\tconst prefixCleared = getIdWithoutLastPart(prefix);\n\t\t\t\t\tkeys.push(`${prefixCleared ? `${prefixCleared}.` : ''}${value}`);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t// Start der Rekursion\n\trecurse(treefDefintion);\n\n\treturn _.uniq(keys);\n}\n\nexport function getAllIdsOfTreeDefinition(treefDefintion: { [key: string]: myCommonState | myCommoneChannelObject | myCommonChannelArray }): string[] {\n\tconst keys: any = [];\n\n\t// Hilfsfunktion f\u00FCr rekursive Durchsuchung des Objekts\n\tfunction recurse(currentObj: any, prefix = ''): void {\n\t\t_.forOwn(currentObj, (value, key) => {\n\t\t\tlet fullKey = prefix ? `${prefix}.${key}` : key;\n\n\t\t\tif (Object.hasOwn(value, 'idChannel') && !_.isObject(value.idChannel)) {\n\t\t\t\tfullKey = prefix ? `${prefix}.${value.idChannel}` : value.idChannel;\n\t\t\t} else if (Object.hasOwn(value, 'id') && !_.isObject(value.id)) {\n\t\t\t\tfullKey = prefix ? `${prefix}.${value.id}` : value.id;\n\t\t\t}\n\n\t\t\tfullKey = fullKey.replace('.array', '').replace('.object', '');\n\n\t\t\t// Wenn der Wert ein Objekt ist (und kein Array), dann weiter rekursiv gehen\n\t\t\tif (_.isObject(value) && typeof value !== 'function' && key !== 'states') {\n\t\t\t\tif (!_.has(value, 'required')) {\n\t\t\t\t\tkeys.push(fullKey);\n\t\t\t\t}\n\n\t\t\t\t// Wenn es ein Array oder Object ist, dann rekursiv weitergehen\n\t\t\t\tif (_.isArray(value) || _.isObject(value)) {\n\t\t\t\t\t// Nur unter 'array' oder 'object' rekursiv weiter\n\t\t\t\t\trecurse(value, fullKey);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t// Start der Rekursion\n\trecurse(treefDefintion);\n\n\treturn _.uniq(keys);\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAc;AAGP,SAAS,oBAAoB,WAAkC,UAA0C;AAC/G,UAAQ,CAAC,SAAS,QAAQ,cAAAA,QAAE,QAAQ,UAAU,MAAM,SAAS,IAAI,OAC/D,CAAC,SAAS,QAAQ,UAAU,SAAS,SAAS,SAC/C,UAAU,SAAS,SAAS,QAC5B,UAAU,SAAS,SAAS,QAC5B,cAAAA,QAAE,QAAQ,UAAU,cAAc,SAAS,YAAY;AACzD;AAEO,SAAS,qBAAqB,WAAmC,UAA2C;AAClH,UAAQ,CAAC,SAAS,QAAQ,cAAAA,QAAE,QAAQ,UAAU,MAAM,SAAS,IAAI,OAC/D,CAAC,SAAS,QAAQ,UAAU,SAAS,SAAS,SAC/C,UAAU,SAAS,SAAS,QAC5B,UAAU,SAAS,SAAS;AAC9B;AAEO,SAAS,kBAAkB,MAAW,KAAU,YAAY,KAAU;AAC5E,QAAM,aAAa,MAAM,QAAQ,IAAI,IAAI,OAAO,KAAK,MAAM,SAAS;AACpE,SAAO,WAAW,OAAO,CAAC,MAAW,SAAc,6BAAO,OAAO,GAAG;AACrE;AAEO,SAAS,uBAAuB,MAAW,KAAU,YAAY,KAAU;AACjF,QAAM,cAAc,kBAAkB,MAAM,KAAK,SAAS;AAC1D,QAAM,SAAc,CAAC;AAErB,MAAI,aAAa;AAChB,eAAW,OAAO,aAAa;AAC9B,aAAO,GAAG,IAAI;AAAA,IACf;AAEA,WAAO;AAAA,EACR;AAEA,SAAO;AACR;AAUO,SAAS,mBAAmB,WAAiC,UAAyC;AAC5G,SAAO,cAAAA,QAAE,QAAQ,UAAU,MAAM,SAAS,IAAI,KAC7C,cAAAA,QAAE,QAAQ,UAAU,MAAM,SAAS,IAAI,KACvC,cAAAA,QAAE,QAAQ,UAAU,MAAM,SAAS,IAAI,KACvC,cAAAA,QAAE,QAAQ,UAAU,OAAO,SAAS,KAAK,KACzC,cAAAA,QAAE,QAAQ,UAAU,MAAM,SAAS,IAAI,KACvC,cAAAA,QAAE,QAAQ,UAAU,KAAK,SAAS,GAAG,KACrC,cAAAA,QAAE,QAAQ,UAAU,MAAM,SAAS,IAAI,KACvC,cAAAA,QAAE,QAAQ,UAAU,MAAM,SAAS,IAAI,KACvC,cAAAA,QAAE,QAAQ,UAAU,MAAM,SAAS,IAAI,KACvC,cAAAA,QAAE,QAAQ,UAAU,KAAK,SAAS,GAAG,KACrC,cAAAA,QAAE,QAAQ,UAAU,KAAK,SAAS,GAAG,KACrC,cAAAA,QAAE,QAAQ,UAAU,QAAQ,SAAS,MAAM;AAC7C;AAEO,SAAS,QAAQ,QAAa,QAAwB;AAC5D,QAAM,OAAO,SAAS,OAAO,SAAS,EAAE,SAAS;AACjD,SAAO,MAAM,EAAE,OAAO,KAAK,KAAK,EAAE,KAAK,GAAG,IAAI;AAC/C;AAQO,SAAS,qBAAqB,IAAoB;AACxD,QAAM,YAAY,GAAG,YAAY,GAAG;AACpC,SAAO,GAAG,UAAU,GAAG,SAAS;AACjC;AAQO,SAAS,cAAc,IAAoB;AACjD,QAAM,SAAS,GAAG,MAAM,GAAG,EAAE,IAAI;AACjC,SAAO,SAAS,SAAS;AAC1B;AAYO,MAAM,yBAAyB,CAAC,QAAa,MAAW,SAA2B,cAAmB,QAAW,SAAiB,OAAY;AACpJ,QAAM,YAAY;AAElB,MAAI;AACH,UAAM,UAAU,CAACC,SAAaC,OAAW,cAAc,OAAY;AAClE,aAAO,cAAAF,QAAE,UAAUC,SAAQ,CAAC,QAAQ,OAAO,QAAQ;AAClD,cAAM,UAAkB,cAAc,GAAG,WAAW,IAAI,GAAa,KAAM;AAE3E,YAAI;AACH,cAAI,CAAC,cAAAD,QAAE,QAAQ,OAAOE,MAAK,GAAG,CAAC,MAAO,eAAe,YAAY,SAAS,OAAO,KAAM,gBAAgB,SAAY;AAClH,gBAAI,cAAAF,QAAE,QAAQ,KAAK,GAAG;AAErB,kBAAI,cAAAA,QAAE,KAAK,OAAO,CAAC,SAAc,cAAAA,QAAE,SAAS,IAAI,CAAC,GAAG;AAEnD,sBAAM,MAAM,CAAC;AACb,oBAAI,QAAQ;AAEZ,yBAAS,IAAI,GAAG,KAAK,MAAM,SAAS,GAAG,KAAK;AAC3C,wBAAM,MAAM,uBAAuB,MAAM,CAAC,GAAGE,MAAK,GAAG,KAAKA,MAAK,GAAG,EAAE,CAAC,IAAIA,MAAK,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,SAAS,aAAa,OAAO;AAEzH,sBAAI,CAAC,cAAAF,QAAE,QAAQ,GAAG,KAAK,QAAQ,KAAK,QAAQ,OAAO;AAElD,wBAAI,KAAK,GAAG;AACZ,4BAAQ;AAAA,kBACT,OAAO;AACN,wBAAI,KAAK,IAAI;AAAA,kBACd;AAAA,gBACD;AAEA,oBAAI,CAAC,OAAO;AACX,yBAAO,GAAG,IAAI;AAAA,gBACf;AAAA,cACD,OAAO;AAEN,oBAAI,CAAC,cAAAA,QAAE,QAAQ,OAAOE,MAAK,GAAG,CAAC,GAAG;AACjC,yBAAO,GAAG,IAAI;AAAA,gBACf;AAAA,cACD;AAAA,YACD,WAAW,cAAAF,QAAE,SAAS,KAAK,KAAK,cAAAA,QAAE,SAASE,MAAK,GAAG,CAAC,GAAG;AACtD,oBAAM,MAAM,QAAQ,OAAOA,MAAK,GAAG,IAAIA,MAAK,GAAG,IAAI,CAAC,GAAG,OAAO;AAC9D,kBAAI,CAAC,cAAAF,QAAE,QAAQ,GAAG,KAAK,QAAQ,KAAK,QAAQ,OAAO;AAClD,uBAAO,GAAG,IAAI;AAAA,cACf;AAAA,YACD,OAAO;AACN,qBAAO,GAAG,IAAI;AAAA,YACf;AAAA,UACD;AAAA,QACD,SAAS,OAAY;AACpB,kBAAQ,IAAI,MAAM,GAAG,SAAS,qBAAqB,KAAK,YAAY,MAAM,KAAK,cAAc,OAAO,aAAa,KAAK,UAAUC,OAAM,CAAC,WAAW,KAAK,UAAUC,KAAI,CAAC,EAAE;AAAA,QACzK;AAAA,MACD,CAAC;AAAA,IACF;AAEA,WAAO,QAAQ,QAAQ,MAAM,MAAM;AAAA,EACpC,SAAS,OAAY;AACpB,YAAQ,IAAI,MAAM,GAAG,SAAS,WAAW,KAAK,YAAY,MAAM,KAAK,aAAa,KAAK,UAAU,MAAM,CAAC,WAAW,KAAK,UAAU,IAAI,CAAC,EAAE;AAAA,EAC1I;AAEA,SAAO;AACR;AAQO,SAAS,2BAA2B,gBAA4G;AACtJ,QAAM,OAAY,CAAC;AAGnB,WAAS,QAAQ,YAAiB,SAAS,IAAU;AACpD,kBAAAF,QAAE,OAAO,YAAY,CAAC,OAAO,QAAQ;AACpC,YAAM,WAAW,SAAS,GAAG,MAAM,IAAI,GAAG,KAAK,KAAK,QAAQ,UAAU,EAAE,EAAE,QAAQ,WAAW,EAAE;AAG/F,UAAI,cAAAA,QAAE,SAAS,KAAK,KAAK,OAAO,UAAU,cAAc,QAAQ,UAAU;AACzE,aAAK,KAAK,OAAO;AAGjB,YAAI,cAAAA,QAAE,QAAQ,KAAK,KAAK,cAAAA,QAAE,SAAS,KAAK,GAAG;AAE1C,kBAAQ,OAAO,OAAO;AAAA,QACvB;AAAA,MACD,OAAO;AACN,YAAI,QAAQ,mBAAmB;AAC9B,gBAAM,gBAAgB,qBAAqB,MAAM;AACjD,eAAK,KAAK,GAAG,gBAAgB,GAAG,aAAa,MAAM,EAAE,GAAG,KAAK,EAAE;AAAA,QAChE;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF;AAGA,UAAQ,cAAc;AAEtB,SAAO,cAAAA,QAAE,KAAK,IAAI;AACnB;AAEO,SAAS,0BAA0B,gBAA4G;AACrJ,QAAM,OAAY,CAAC;AAGnB,WAAS,QAAQ,YAAiB,SAAS,IAAU;AACpD,kBAAAA,QAAE,OAAO,YAAY,CAAC,OAAO,QAAQ;AACpC,UAAI,UAAU,SAAS,GAAG,MAAM,IAAI,GAAG,KAAK;AAE5C,UAAI,OAAO,OAAO,OAAO,WAAW,KAAK,CAAC,cAAAA,QAAE,SAAS,MAAM,SAAS,GAAG;AACtE,kBAAU,SAAS,GAAG,MAAM,IAAI,MAAM,SAAS,KAAK,MAAM;AAAA,MAC3D,WAAW,OAAO,OAAO,OAAO,IAAI,KAAK,CAAC,cAAAA,QAAE,SAAS,MAAM,EAAE,GAAG;AAC/D,kBAAU,SAAS,GAAG,MAAM,IAAI,MAAM,EAAE,KAAK,MAAM;AAAA,MACpD;AAEA,gBAAU,QAAQ,QAAQ,UAAU,EAAE,EAAE,QAAQ,WAAW,EAAE;AAG7D,UAAI,cAAAA,QAAE,SAAS,KAAK,KAAK,OAAO,UAAU,cAAc,QAAQ,UAAU;AACzE,YAAI,CAAC,cAAAA,QAAE,IAAI,OAAO,UAAU,GAAG;AAC9B,eAAK,KAAK,OAAO;AAAA,QAClB;AAGA,YAAI,cAAAA,QAAE,QAAQ,KAAK,KAAK,cAAAA,QAAE,SAAS,KAAK,GAAG;AAE1C,kBAAQ,OAAO,OAAO;AAAA,QACvB;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF;AAGA,UAAQ,cAAc;AAEtB,SAAO,cAAAA,QAAE,KAAK,IAAI;AACnB;",
  "names": ["_", "object", "base"]
}
