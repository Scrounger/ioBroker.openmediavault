{
  "version": 3,
  "sources": ["../../../src/lib/tree/smart.ts"],
  "sourcesContent": ["import _ from 'lodash';\r\nimport { IoBrokerObjectDefinitions, myCommonChannelArray, myCommonState, myCommoneChannelObject } from '../myTypes.js';\r\nimport * as myHelper from '../helper.js';\r\nimport { Smart } from \"../types-smart.js\";\r\n\r\nexport namespace smart {\r\n    let keys: string[] | undefined = undefined;\r\n\r\n    export const idChannel = 'smart'\r\n\r\n    export const iobObjectDefintions: IoBrokerObjectDefinitions = {\r\n        channelName: 'S.M.A.R.T info',\r\n        deviceIdProperty: 'uuid',\r\n        deviceNameProperty: 'devicename',\r\n    }\r\n\r\n    export function get(): { [key: string]: myCommonState | myCommoneChannelObject | myCommonChannelArray } {\r\n        return {\r\n            canonicaldevicefile: {\r\n                iobType: 'string',\r\n                name: 'canonical device file',\r\n            },\r\n            description: {\r\n                iobType: 'string',\r\n                name: 'description',\r\n            },\r\n            devicefile: {\r\n                iobType: 'string',\r\n                name: 'device file',\r\n            },\r\n            devicelinks: {\r\n                iobType: 'string',\r\n                name: 'hostname',\r\n                readVal(val: string, adapter: ioBroker.Adapter, deviceOrClient: Smart, id: string): ioBroker.StateValue {\r\n                    return JSON.stringify(val);\r\n                }\r\n            },\r\n            devicename: {\r\n                id: 'devicename',\r\n                iobType: 'string',\r\n                name: 'device name',\r\n            },\r\n            model: {\r\n                iobType: 'string',\r\n                name: 'model',\r\n            },\r\n            monitor: {\r\n                iobType: 'boolean',\r\n                name: 'is monitored'\r\n            },\r\n            overallstatus: {\r\n                iobType: 'string',\r\n                name: 'overall status',\r\n            },\r\n            serialnumber: {\r\n                iobType: 'string',\r\n                name: 'serialnumber',\r\n            },\r\n            size: {\r\n                iobType: 'number',\r\n                name: 'size',\r\n                unit: 'TB',\r\n                readVal(val: number, adapter: ioBroker.Adapter, deviceOrClient: Smart, id: string): ioBroker.StateValue {\r\n                    return Math.round(val / 1024 / 1024 / 1024 / 1024 * 1000) / 1000;\r\n                }\r\n            },\r\n            temperature: {\r\n                iobType: 'number',\r\n                name: 'temperature',\r\n                unit: '\u00B0C',\r\n                conditionToCreateState(objDevice: Smart, adapter: ioBroker.Adapter): boolean {\r\n                    return objDevice.temperature > 0;\r\n                },\r\n                readVal: function (val: number, adapter: ioBroker.Adapter, deviceOrClient: Smart, id: string): ioBroker.StateValue {\r\n                    return Math.round(val * 10) / 10;\r\n                },\r\n            },\r\n            uuid: {\r\n                iobType: 'string',\r\n                name: 'uuid',\r\n            },\r\n            vendor: {\r\n                iobType: 'string',\r\n                name: 'vendor',\r\n            },\r\n        }\r\n    }\r\n\r\n    export function getKeys(): string[] {\r\n        if (keys === undefined) {\r\n            keys = myHelper.getAllKeysOfTreeDefinition(get());\r\n        }\r\n\r\n        return keys\r\n    }\r\n\r\n    export function getStateIDs(): string[] {\r\n        return myHelper.getAllIdsOfTreeDefinition(get());\r\n    }\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,eAA0B;AAGnB,IAAU;AAAA,CAAV,CAAUA,WAAV;AACH,MAAI,OAA6B;AAE1B,EAAMA,OAAA,YAAY;AAElB,EAAMA,OAAA,sBAAiD;AAAA,IAC1D,aAAa;AAAA,IACb,kBAAkB;AAAA,IAClB,oBAAoB;AAAA,EACxB;AAEO,WAAS,MAAwF;AACpG,WAAO;AAAA,MACH,qBAAqB;AAAA,QACjB,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,aAAa;AAAA,QACT,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,YAAY;AAAA,QACR,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,aAAa;AAAA,QACT,SAAS;AAAA,QACT,MAAM;AAAA,QACN,QAAQ,KAAa,SAA2B,gBAAuB,IAAiC;AACpG,iBAAO,KAAK,UAAU,GAAG;AAAA,QAC7B;AAAA,MACJ;AAAA,MACA,YAAY;AAAA,QACR,IAAI;AAAA,QACJ,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,OAAO;AAAA,QACH,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,SAAS;AAAA,QACL,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,eAAe;AAAA,QACX,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,cAAc;AAAA,QACV,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,MAAM;AAAA,QACF,SAAS;AAAA,QACT,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ,KAAa,SAA2B,gBAAuB,IAAiC;AACpG,iBAAO,KAAK,MAAM,MAAM,OAAO,OAAO,OAAO,OAAO,GAAI,IAAI;AAAA,QAChE;AAAA,MACJ;AAAA,MACA,aAAa;AAAA,QACT,SAAS;AAAA,QACT,MAAM;AAAA,QACN,MAAM;AAAA,QACN,uBAAuB,WAAkB,SAAoC;AACzE,iBAAO,UAAU,cAAc;AAAA,QACnC;AAAA,QACA,SAAS,SAAU,KAAa,SAA2B,gBAAuB,IAAiC;AAC/G,iBAAO,KAAK,MAAM,MAAM,EAAE,IAAI;AAAA,QAClC;AAAA,MACJ;AAAA,MACA,MAAM;AAAA,QACF,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,QAAQ;AAAA,QACJ,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,EACJ;AAtEO,EAAAA,OAAS;AAwET,WAAS,UAAoB;AAChC,QAAI,SAAS,QAAW;AACpB,aAAO,SAAS,2BAA2B,IAAI,CAAC;AAAA,IACpD;AAEA,WAAO;AAAA,EACX;AANO,EAAAA,OAAS;AAQT,WAAS,cAAwB;AACpC,WAAO,SAAS,0BAA0B,IAAI,CAAC;AAAA,EACnD;AAFO,EAAAA,OAAS;AAAA,GA3FH;",
  "names": ["smart"]
}
