{
  "version": 3,
  "sources": ["../../../src/lib/tree/hwInfo.ts"],
  "sourcesContent": ["import _ from 'lodash';\r\nimport { IoBrokerObjectDefinitions, myCommonChannelArray, myCommonState, myCommoneChannelObject } from '../myTypes.js';\r\nimport * as myHelper from '../helper.js';\r\nimport { HwInfo } from \"../types-hwInfo.js\";\r\n\r\nexport namespace hwInfo {\r\n    let keys: string[] | undefined = undefined;\r\n\r\n    export const idChannel = 'hwInfo'\r\n\r\n    export const iobObjectDefintions: IoBrokerObjectDefinitions = {\r\n        channelName: 'hardware info',\r\n        deviceIdProperty: undefined,\r\n        deviceNameProperty: undefined,\r\n    }\r\n\r\n    export function get(): { [key: string]: myCommonState | myCommoneChannelObject | myCommonChannelArray } {\r\n        return {\r\n            availablePkgUpdates: {\r\n                iobType: 'number',\r\n                name: 'available package updates',\r\n            },\r\n            cpuModelName: {\r\n                iobType: 'string',\r\n                name: 'cpu model',\r\n            },\r\n            cpuUtilization: {\r\n                iobType: 'number',\r\n                name: 'cpu utilization',\r\n                unit: '%',\r\n                readVal(val: number, adapter: ioBroker.Adapter, deviceOrClient: HwInfo, id: string): ioBroker.StateValue {\r\n                    return Math.round(val);\r\n                }\r\n            },\r\n            cpuCores: {\r\n                iobType: 'number',\r\n                name: 'cpu cores',\r\n            },\r\n            cpuMhz: {\r\n                iobType: 'number',\r\n                name: 'cpu freqency',\r\n            },\r\n            hostname: {\r\n                iobType: 'string',\r\n                name: 'hostname',\r\n            },\r\n            kernel: {\r\n                iobType: 'string',\r\n                name: 'hostname',\r\n            },\r\n            loadAverage: {\r\n                idChannel: 'loadAverage',\r\n                channelName(objDevice: HwInfo, objChannel: any, adapter: ioBroker.Adapter): string {\r\n                    return 'load average'\r\n                },\r\n                object: {\r\n                    '1min': {\r\n                        iobType: 'number',\r\n                        name: '1 minute',\r\n                    },\r\n                    '5min': {\r\n                        iobType: 'number',\r\n                        name: '5 minute',\r\n                    },\r\n                    '15min': {\r\n                        iobType: 'number',\r\n                        name: '15 minute',\r\n                    },\r\n                }\r\n            },\r\n            memTotal: {\r\n                iobType: 'number',\r\n                name: 'memory total',\r\n                unit: 'GB',\r\n                readVal(val: number, adapter: ioBroker.Adapter, deviceOrClient: HwInfo, id: string): ioBroker.StateValue {\r\n                    return Math.round(val / 1024 / 1024 / 1024 * 1000) / 1000;\r\n                }\r\n            },\r\n            memFree: {\r\n                iobType: 'number',\r\n                name: 'memory free',\r\n                unit: 'GB',\r\n                readVal(val: number, adapter: ioBroker.Adapter, deviceOrClient: HwInfo, id: string): ioBroker.StateValue {\r\n                    return Math.round(val / 1024 / 1024 / 1024 * 1000) / 1000;\r\n                }\r\n            },\r\n            memUsed: {\r\n                iobType: 'number',\r\n                name: 'memory used',\r\n                unit: 'GB',\r\n                readVal(val: number, adapter: ioBroker.Adapter, deviceOrClient: HwInfo, id: string): ioBroker.StateValue {\r\n                    return Math.round(val / 1024 / 1024 / 1024 * 1000) / 1000;\r\n                }\r\n            },\r\n            memAvailable: {\r\n                iobType: 'number',\r\n                name: 'memory available',\r\n                unit: 'GB',\r\n                readVal(val: number, adapter: ioBroker.Adapter, deviceOrClient: HwInfo, id: string): ioBroker.StateValue {\r\n                    return Math.round(val / 1024 / 1024 / 1024 * 1000) / 1000;\r\n                }\r\n            },\r\n            memUtilization: {\r\n                iobType: 'number',\r\n                name: 'memory utilization',\r\n                unit: '%',\r\n                readVal(val: number, adapter: ioBroker.Adapter, deviceOrClient: HwInfo, id: string): ioBroker.StateValue {\r\n                    return Math.round(val * 100);\r\n                }\r\n            },\r\n            rebootRequired: {\r\n                iobType: 'boolean',\r\n                name: 'restart required'\r\n            },\r\n            uptime: {\r\n                iobType: 'number',\r\n                name: 'uptime',\r\n                unit: 's',\r\n                readVal(val: number, adapter: ioBroker.Adapter, deviceOrClient: HwInfo, id: string): ioBroker.StateValue {\r\n                    return Math.round(val);\r\n                }\r\n            },\r\n            version: {\r\n                iobType: 'string',\r\n                name: 'version',\r\n            },\r\n        }\r\n    }\r\n\r\n    export function getKeys(): string[] {\r\n        if (keys === undefined) {\r\n            keys = myHelper.getAllKeysOfTreeDefinition(get());\r\n        }\r\n\r\n        return keys\r\n    }\r\n\r\n    export function getStateIDs(): string[] {\r\n        return myHelper.getAllIdsOfTreeDefinition(get());\r\n    }\r\n}"],
  "mappings": "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",
  "names": ["hwInfo"]
}
