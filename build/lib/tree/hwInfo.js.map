{
  "version": 3,
  "sources": ["../../../src/lib/tree/hwInfo.ts"],
  "sourcesContent": ["import _ from 'lodash';\nimport { myCache, myCommonChannelArray, myCommonState, myCommoneChannelObject } from '../myTypes.js';\nimport * as myHelper from '../helper.js';\nimport { HwInfo } from \"../types-hwInfo.js\";\n\nexport namespace hwInfo {\n    let keys: string[] | undefined = undefined;\n\n    export const idChannel = 'hwInfo'\n\n    export function get(): { [key: string]: myCommonState | myCommoneChannelObject | myCommonChannelArray } {\n        return {\n            availablePkgUpdates: {\n                iobType: 'number',\n                name: 'available package updates',\n            },\n            cpuModelName: {\n                iobType: 'string',\n                name: 'cpu model',\n            },\n            cpuUtilization: {\n                iobType: 'number',\n                name: 'cpu utilization',\n                unit: '%',\n                readVal(val: number, adapter: ioBroker.Adapter, deviceOrClient: HwInfo, id: string): ioBroker.StateValue {\n                    return Math.round(val);\n                }\n            },\n            cpuCores: {\n                iobType: 'number',\n                name: 'cpu cores',\n            },\n            cpuMhz: {\n                iobType: 'number',\n                name: 'cpu freqency',\n            },\n            hostname: {\n                iobType: 'string',\n                name: 'hostname',\n            },\n            kernel: {\n                iobType: 'string',\n                name: 'hostname',\n            },\n            loadAverage: {\n                idChannel: 'loadAverage',\n                channelName(objDevice: HwInfo, objChannel: any, adapter: ioBroker.Adapter): string {\n                    return 'load average'\n                },\n                object: {\n                    '1min': {\n                        iobType: 'number',\n                        name: '1 minute',\n                    },\n                    '5min': {\n                        iobType: 'number',\n                        name: '5 minute',\n                    },\n                    '15min': {\n                        iobType: 'number',\n                        name: '15 minute',\n                    },\n                }\n            },\n            memTotal: {\n                iobType: 'number',\n                name: 'memory total',\n                unit: 'GB',\n                readVal(val: number, adapter: ioBroker.Adapter, deviceOrClient: HwInfo, id: string): ioBroker.StateValue {\n                    return Math.round(val / 1024 / 1024 / 1024 * 1000) / 1000;\n                }\n            },\n            memFree: {\n                iobType: 'number',\n                name: 'memory free',\n                unit: 'GB',\n                readVal(val: number, adapter: ioBroker.Adapter, deviceOrClient: HwInfo, id: string): ioBroker.StateValue {\n                    return Math.round(val / 1024 / 1024 / 1024 * 1000) / 1000;\n                }\n            },\n            memUsed: {\n                iobType: 'number',\n                name: 'memory used',\n                unit: 'GB',\n                readVal(val: number, adapter: ioBroker.Adapter, deviceOrClient: HwInfo, id: string): ioBroker.StateValue {\n                    return Math.round(val / 1024 / 1024 / 1024 * 1000) / 1000;\n                }\n            },\n            memAvailable: {\n                iobType: 'number',\n                name: 'memory available',\n                unit: 'GB',\n                readVal(val: number, adapter: ioBroker.Adapter, deviceOrClient: HwInfo, id: string): ioBroker.StateValue {\n                    return Math.round(val / 1024 / 1024 / 1024 * 1000) / 1000;\n                }\n            },\n            memUtilization: {\n                iobType: 'number',\n                name: 'memory utilization',\n                unit: '%',\n                readVal(val: number, adapter: ioBroker.Adapter, deviceOrClient: HwInfo, id: string): ioBroker.StateValue {\n                    return Math.round(val * 100);\n                }\n            },\n            rebootRequired: {\n                iobType: 'boolean',\n                name: 'restart required'\n            },\n            uptime: {\n                iobType: 'number',\n                name: 'uptime',\n                unit: 's',\n                readVal(val: number, adapter: ioBroker.Adapter, deviceOrClient: HwInfo, id: string): ioBroker.StateValue {\n                    return Math.round(val);\n                }\n            },\n            version: {\n                iobType: 'string',\n                name: 'version',\n            },\n        }\n    }\n\n    export function getKeys(): string[] {\n        if (keys === undefined) {\n            keys = myHelper.getAllKeysOfTreeDefinition(get());\n        }\n\n        return keys\n    }\n\n    export function getStateIDs(): string[] {\n        return myHelper.getAllIdsOfTreeDefinition(get());\n    }\n}"],
  "mappings": "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",
  "names": ["hwInfo"]
}
