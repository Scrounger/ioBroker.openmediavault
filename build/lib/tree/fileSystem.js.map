{
  "version": 3,
  "sources": ["../../../src/lib/tree/fileSystem.ts"],
  "sourcesContent": ["import _ from 'lodash';\r\nimport { IoBrokerObjectDefinitions, myCommonChannelArray, myCommonState, myCommoneChannelObject } from '../myTypes.js';\r\nimport * as myHelper from '../helper.js';\r\nimport { FileSystem } from \"../types-fileSystem.js\";\r\n\r\nexport namespace fileSystem {\r\n    let keys: string[] | undefined = undefined;\r\n\r\n    export const idChannel = 'fileSystem'\r\n\r\n    export const iobObjectDefintions: IoBrokerObjectDefinitions = {\r\n        channelName: 'file system info',\r\n        deviceIdProperty: 'uuid',\r\n        deviceNameProperty: 'label',\r\n    }\r\n\r\n    export function get(): { [key: string]: myCommonState | myCommoneChannelObject | myCommonChannelArray } {\r\n        return {\r\n            available: {\r\n                iobType: 'number',\r\n                name: 'available',\r\n                unit: 'TB',\r\n                readVal(val: number, adapter: ioBroker.Adapter, deviceOrClient: FileSystem, id: string): ioBroker.StateValue {\r\n                    return Math.round(val / 1024 / 1024 / 1024 / 1024 * 1000) / 1000;\r\n                }\r\n            },\r\n            comment: {\r\n                iobType: 'string',\r\n                name: 'comment',\r\n            },\r\n            devicefile: {\r\n                iobType: 'string',\r\n                name: 'device file',\r\n            },\r\n            description: {\r\n                iobType: 'string',\r\n                name: 'description',\r\n            },\r\n            devicename: {\r\n                iobType: 'string',\r\n                name: 'device name',\r\n            },\r\n            label: {\r\n                iobType: 'string',\r\n                name: 'device name',\r\n            },\r\n            mounted: {\r\n                iobType: 'boolean',\r\n                name: 'monted'\r\n            },\r\n            mountpoint: {\r\n                iobType: 'string',\r\n                name: 'mountpoint',\r\n            },\r\n            percentage: {\r\n                iobType: 'number',\r\n                name: 'percentage',\r\n                unit: '%',\r\n                readVal(val: number, adapter: ioBroker.Adapter, deviceOrClient: FileSystem, id: string): ioBroker.StateValue {\r\n                    return Math.round(val);\r\n                }\r\n            },\r\n            size: {\r\n                iobType: 'number',\r\n                name: 'size',\r\n                unit: 'TB',\r\n                readVal(val: number, adapter: ioBroker.Adapter, deviceOrClient: FileSystem, id: string): ioBroker.StateValue {\r\n                    return Math.round(val / 1024 / 1024 / 1024 / 1024 * 1000) / 1000;\r\n                }\r\n            },\r\n            type: {\r\n                iobType: 'string',\r\n                name: 'type',\r\n            },\r\n            used: {\r\n                iobType: 'number',\r\n                name: 'used',\r\n                unit: 'TB',\r\n                readVal(val: number, adapter: ioBroker.Adapter, deviceOrClient: FileSystem, id: string): ioBroker.StateValue {\r\n                    return Math.round((deviceOrClient.size - deviceOrClient.available) / 1024 / 1024 / 1024 / 1024 * 1000) / 1000;\r\n                }\r\n            },\r\n            uuid: {\r\n                iobType: 'string',\r\n                name: 'uuid',\r\n            },\r\n        }\r\n    }\r\n\r\n    export function getKeys(): string[] {\r\n        if (keys === undefined) {\r\n            keys = myHelper.getAllKeysOfTreeDefinition(get());\r\n        }\r\n\r\n        return keys\r\n    }\r\n\r\n    export function getStateIDs(): string[] {\r\n        return myHelper.getAllIdsOfTreeDefinition(get());\r\n    }\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,eAA0B;AAGnB,IAAU;AAAA,CAAV,CAAUA,gBAAV;AACH,MAAI,OAA6B;AAE1B,EAAMA,YAAA,YAAY;AAElB,EAAMA,YAAA,sBAAiD;AAAA,IAC1D,aAAa;AAAA,IACb,kBAAkB;AAAA,IAClB,oBAAoB;AAAA,EACxB;AAEO,WAAS,MAAwF;AACpG,WAAO;AAAA,MACH,WAAW;AAAA,QACP,SAAS;AAAA,QACT,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ,KAAa,SAA2B,gBAA4B,IAAiC;AACzG,iBAAO,KAAK,MAAM,MAAM,OAAO,OAAO,OAAO,OAAO,GAAI,IAAI;AAAA,QAChE;AAAA,MACJ;AAAA,MACA,SAAS;AAAA,QACL,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,YAAY;AAAA,QACR,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,aAAa;AAAA,QACT,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,YAAY;AAAA,QACR,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,OAAO;AAAA,QACH,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,SAAS;AAAA,QACL,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,YAAY;AAAA,QACR,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,YAAY;AAAA,QACR,SAAS;AAAA,QACT,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ,KAAa,SAA2B,gBAA4B,IAAiC;AACzG,iBAAO,KAAK,MAAM,GAAG;AAAA,QACzB;AAAA,MACJ;AAAA,MACA,MAAM;AAAA,QACF,SAAS;AAAA,QACT,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ,KAAa,SAA2B,gBAA4B,IAAiC;AACzG,iBAAO,KAAK,MAAM,MAAM,OAAO,OAAO,OAAO,OAAO,GAAI,IAAI;AAAA,QAChE;AAAA,MACJ;AAAA,MACA,MAAM;AAAA,QACF,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,MAAM;AAAA,QACF,SAAS;AAAA,QACT,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ,KAAa,SAA2B,gBAA4B,IAAiC;AACzG,iBAAO,KAAK,OAAO,eAAe,OAAO,eAAe,aAAa,OAAO,OAAO,OAAO,OAAO,GAAI,IAAI;AAAA,QAC7G;AAAA,MACJ;AAAA,MACA,MAAM;AAAA,QACF,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,EACJ;AAvEO,EAAAA,YAAS;AAyET,WAAS,UAAoB;AAChC,QAAI,SAAS,QAAW;AACpB,aAAO,SAAS,2BAA2B,IAAI,CAAC;AAAA,IACpD;AAEA,WAAO;AAAA,EACX;AANO,EAAAA,YAAS;AAQT,WAAS,cAAwB;AACpC,WAAO,SAAS,0BAA0B,IAAI,CAAC;AAAA,EACnD;AAFO,EAAAA,YAAS;AAAA,GA5FH;",
  "names": ["fileSystem"]
}
