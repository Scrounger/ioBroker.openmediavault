{
  "version": 3,
  "sources": ["../../../src/lib/tree/fileSystem.ts"],
  "sourcesContent": ["import _ from 'lodash';\nimport { myCache, myCommonChannelArray, myCommonState, myCommoneChannelObject } from '../myTypes.js';\nimport * as myHelper from '../helper.js';\nimport { FileSystem } from \"../types-fileSystem.js\";\n\nexport namespace fileSystem {\n    let keys: string[] | undefined = undefined;\n\n    export const idChannel = 'fileSystem'\n\n    export function get(): { [key: string]: myCommonState | myCommoneChannelObject | myCommonChannelArray } {\n        return {\n            available: {\n                iobType: 'number',\n                name: 'available',\n                unit: 'TB',\n                readVal(val: number, adapter: ioBroker.Adapter, deviceOrClient: FileSystem, id: string): ioBroker.StateValue {\n                    return Math.round(val / 1024 / 1024 / 1024 / 1024 * 1000) / 1000;\n                }\n            },\n            comment: {\n                iobType: 'string',\n                name: 'comment',\n            },\n            devicefile: {\n                iobType: 'string',\n                name: 'device file',\n            },\n            description: {\n                iobType: 'string',\n                name: 'description',\n            },\n            devicename: {\n                iobType: 'string',\n                name: 'device name',\n            },\n            devicelinks: {\n                iobType: 'string',\n                name: 'hostname',\n                readVal(val: string, adapter: ioBroker.Adapter, deviceOrClient: FileSystem, id: string): ioBroker.StateValue {\n                    return JSON.stringify(val);\n                }\n            },\n            label: {\n                iobType: 'string',\n                name: 'device name',\n            },\n            mounted: {\n                iobType: 'boolean',\n                name: 'monted'\n            },\n            mountpoint: {\n                iobType: 'string',\n                name: 'mountpoint',\n            },\n            percentage: {\n                iobType: 'number',\n                name: 'percentage',\n                unit: '%',\n                readVal(val: number, adapter: ioBroker.Adapter, deviceOrClient: FileSystem, id: string): ioBroker.StateValue {\n                    return Math.round(val);\n                }\n            },\n            size: {\n                iobType: 'number',\n                name: 'size',\n                unit: 'TB',\n                readVal(val: number, adapter: ioBroker.Adapter, deviceOrClient: FileSystem, id: string): ioBroker.StateValue {\n                    return Math.round(val / 1024 / 1024 / 1024 / 1024 * 1000) / 1000;\n                }\n            },\n            type: {\n                iobType: 'string',\n                name: 'type',\n            },\n            used: {\n                iobType: 'number',\n                name: 'used',\n                unit: 'TB',\n                readVal(val: number, adapter: ioBroker.Adapter, deviceOrClient: FileSystem, id: string): ioBroker.StateValue {\n                    return Math.round((deviceOrClient.size - deviceOrClient.available) / 1024 / 1024 / 1024 / 1024 * 1000) / 1000;\n                }\n            },\n            uuid: {\n                iobType: 'string',\n                name: 'uuid',\n            },\n        }\n    }\n\n    export function getKeys(): string[] {\n        if (keys === undefined) {\n            keys = myHelper.getAllKeysOfTreeDefinition(get());\n        }\n\n        return keys\n    }\n\n    export function getStateIDs(): string[] {\n        return myHelper.getAllIdsOfTreeDefinition(get());\n    }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,eAA0B;AAGnB,IAAU;AAAA,CAAV,CAAUA,gBAAV;AACH,MAAI,OAA6B;AAE1B,EAAMA,YAAA,YAAY;AAElB,WAAS,MAAwF;AACpG,WAAO;AAAA,MACH,WAAW;AAAA,QACP,SAAS;AAAA,QACT,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ,KAAa,SAA2B,gBAA4B,IAAiC;AACzG,iBAAO,KAAK,MAAM,MAAM,OAAO,OAAO,OAAO,OAAO,GAAI,IAAI;AAAA,QAChE;AAAA,MACJ;AAAA,MACA,SAAS;AAAA,QACL,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,YAAY;AAAA,QACR,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,aAAa;AAAA,QACT,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,YAAY;AAAA,QACR,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,aAAa;AAAA,QACT,SAAS;AAAA,QACT,MAAM;AAAA,QACN,QAAQ,KAAa,SAA2B,gBAA4B,IAAiC;AACzG,iBAAO,KAAK,UAAU,GAAG;AAAA,QAC7B;AAAA,MACJ;AAAA,MACA,OAAO;AAAA,QACH,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,SAAS;AAAA,QACL,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,YAAY;AAAA,QACR,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,YAAY;AAAA,QACR,SAAS;AAAA,QACT,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ,KAAa,SAA2B,gBAA4B,IAAiC;AACzG,iBAAO,KAAK,MAAM,GAAG;AAAA,QACzB;AAAA,MACJ;AAAA,MACA,MAAM;AAAA,QACF,SAAS;AAAA,QACT,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ,KAAa,SAA2B,gBAA4B,IAAiC;AACzG,iBAAO,KAAK,MAAM,MAAM,OAAO,OAAO,OAAO,OAAO,GAAI,IAAI;AAAA,QAChE;AAAA,MACJ;AAAA,MACA,MAAM;AAAA,QACF,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,MAAM;AAAA,QACF,SAAS;AAAA,QACT,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ,KAAa,SAA2B,gBAA4B,IAAiC;AACzG,iBAAO,KAAK,OAAO,eAAe,OAAO,eAAe,aAAa,OAAO,OAAO,OAAO,OAAO,GAAI,IAAI;AAAA,QAC7G;AAAA,MACJ;AAAA,MACA,MAAM;AAAA,QACF,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,EACJ;AA9EO,EAAAA,YAAS;AAgFT,WAAS,UAAoB;AAChC,QAAI,SAAS,QAAW;AACpB,aAAO,SAAS,2BAA2B,IAAI,CAAC;AAAA,IACpD;AAEA,WAAO;AAAA,EACX;AANO,EAAAA,YAAS;AAQT,WAAS,cAAwB;AACpC,WAAO,SAAS,0BAA0B,IAAI,CAAC;AAAA,EACnD;AAFO,EAAAA,YAAS;AAAA,GA7FH;",
  "names": ["fileSystem"]
}
